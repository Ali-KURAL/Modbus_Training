
Modbus_Training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  20000238  080076a0  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001760  080076a0  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb13  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cff  00000000  00000000  0003cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00040a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00042100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294f3  00000000  00000000  000435f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e7f  00000000  00000000  0006caeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe0f6  00000000  00000000  0008596a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d18  00000000  00000000  00183ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073bc 	.word	0x080073bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	080073bc 	.word	0x080073bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000254 	.word	0x20000254
 80004f8:	200002a8 	.word	0x200002a8

080004fc <ModbusRtu_TransmitCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ModbusRtu_TransmitCallback( uint8_t* buffer, uint16_t lengthOfBuffer){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit( &huart2, buffer, lengthOfBuffer, 200 );
 8000508:	887a      	ldrh	r2, [r7, #2]
 800050a:	23c8      	movs	r3, #200	; 0xc8
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <ModbusRtu_TransmitCallback+0x20>)
 8000510:	f002 fd66 	bl	8002fe0 <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200011e4 	.word	0x200011e4

08000520 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART2){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <HAL_UART_ErrorCallback+0x24>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d104      	bne.n	800053c <HAL_UART_ErrorCallback+0x1c>
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 8000532:	2120      	movs	r1, #32
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f000 feda 	bl	80012f0 <HAL_GPIO_TogglePin>
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40004400 	.word	0x40004400

08000548 <ModbusRtu_InitCallback>:

void ModbusRtu_InitCallback(){
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	//HAL_UART_Receive_IT( &huart2, &data, 1);
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <ModbusRtu_ReadRequestCallback>:

void ModbusRtu_ReadRequestCallback( uint8_t* buffer, uint16_t length ){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, buffer, length );
 8000564:	887b      	ldrh	r3, [r7, #2]
 8000566:	461a      	mov	r2, r3
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <ModbusRtu_ReadRequestCallback+0x20>)
 800056c:	f002 fdcc 	bl	8003108 <HAL_UART_Receive_IT>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200011e4 	.word	0x200011e4

0800057c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART2 ){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_UART_RxCpltCallback+0x20>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d101      	bne.n	8000592 <HAL_UART_RxCpltCallback+0x16>
		ModbusRtu_Slave_onReceive();
 800058e:	f006 fdb1 	bl	80070f4 <ModbusRtu_Slave_onReceive>
	}
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40004400 	.word	0x40004400

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	_rtuConfig.init = ModbusRtu_InitCallback;
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <main+0x110>)
 80005a8:	4a42      	ldr	r2, [pc, #264]	; (80006b4 <main+0x114>)
 80005aa:	605a      	str	r2, [r3, #4]
	_rtuConfig.send = ModbusRtu_TransmitCallback;
 80005ac:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <main+0x110>)
 80005ae:	4a42      	ldr	r2, [pc, #264]	; (80006b8 <main+0x118>)
 80005b0:	609a      	str	r2, [r3, #8]
	_rtuConfig.requestRead = ModbusRtu_ReadRequestCallback;
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <main+0x110>)
 80005b4:	4a41      	ldr	r2, [pc, #260]	; (80006bc <main+0x11c>)
 80005b6:	60da      	str	r2, [r3, #12]
	_rtuConfig.id = MODBUS_SLAVE_DEV_ID;
 80005b8:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <main+0x110>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	701a      	strb	r2, [r3, #0]



	ModbusRtu_Slave_Init(&_rtuConfig);
 80005be:	483c      	ldr	r0, [pc, #240]	; (80006b0 <main+0x110>)
 80005c0:	f006 fcfa 	bl	8006fb8 <ModbusRtu_Slave_Init>

	//COILS
	coilCCWRegHandle = ModbusSlave_CreateCoilStatus(COIL_CCW, coilCCWVal);
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <main+0x120>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200b      	movs	r0, #11
 80005cc:	f005 fd5e 	bl	800608c <ModbusSlave_CreateCoilStatus>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a3c      	ldr	r2, [pc, #240]	; (80006c4 <main+0x124>)
 80005d4:	6013      	str	r3, [r2, #0]
	coilCWRegHandle = ModbusSlave_CreateCoilStatus(COIL_CW, coilCWVal);
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <main+0x128>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	200a      	movs	r0, #10
 80005de:	f005 fd55 	bl	800608c <ModbusSlave_CreateCoilStatus>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a39      	ldr	r2, [pc, #228]	; (80006cc <main+0x12c>)
 80005e6:	6013      	str	r3, [r2, #0]

	//INPUT REGISTERS
	currentDrawnByMotorRegHandle = ModbusSlave_CreateInputRegister(CURRENT_DRAWN_BY_MOTOR, currentDrawnByMotorVal);
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <main+0x130>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	200c      	movs	r0, #12
 80005f0:	f005 fdfe 	bl	80061f0 <ModbusSlave_CreateInputRegister>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <main+0x134>)
 80005f8:	6013      	str	r3, [r2, #0]
	currentValueRegHandle = ModbusSlave_CreateInputRegister(CURRENT_VALUE, currentVal);
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <main+0x138>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	200e      	movs	r0, #14
 8000602:	f005 fdf5 	bl	80061f0 <ModbusSlave_CreateInputRegister>
 8000606:	4603      	mov	r3, r0
 8000608:	4a34      	ldr	r2, [pc, #208]	; (80006dc <main+0x13c>)
 800060a:	6013      	str	r3, [r2, #0]
	inputVoltageRegHandle = ModbusSlave_CreateInputRegister(INPUT_VOLTAGE, inputVoltageVal);
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <main+0x140>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	200f      	movs	r0, #15
 8000614:	f005 fdec 	bl	80061f0 <ModbusSlave_CreateInputRegister>
 8000618:	4603      	mov	r3, r0
 800061a:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <main+0x144>)
 800061c:	6013      	str	r3, [r2, #0]
	activeResistanceValueRegHandle = ModbusSlave_CreateInputRegister(ACTIVE_RESISTANCE_VALUE, activeResistanceVal);
 800061e:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <main+0x148>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	200d      	movs	r0, #13
 8000626:	f005 fde3 	bl	80061f0 <ModbusSlave_CreateInputRegister>
 800062a:	4603      	mov	r3, r0
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <main+0x14c>)
 800062e:	6013      	str	r3, [r2, #0]

	//HOLDING REGISTERS
	motorStolCurrentRegHandle = ModbusSlave_CreateHoldingRegister(MOTOR_STOL_CURRENT, motorStolCurrentVal);
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <main+0x150>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	2010      	movs	r0, #16
 8000638:	f005 fd82 	bl	8006140 <ModbusSlave_CreateHoldingRegister>
 800063c:	4603      	mov	r3, r0
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <main+0x154>)
 8000640:	6013      	str	r3, [r2, #0]
	motorStolTimeRegHandle = ModbusSlave_CreateHoldingRegister(MOTOR_STOL_TIME, motorStolTimeVal);
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <main+0x158>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	2011      	movs	r0, #17
 800064a:	f005 fd79 	bl	8006140 <ModbusSlave_CreateHoldingRegister>
 800064e:	4603      	mov	r3, r0
 8000650:	4a2a      	ldr	r2, [pc, #168]	; (80006fc <main+0x15c>)
 8000652:	6013      	str	r3, [r2, #0]
	pwmCCWRegHandle = ModbusSlave_CreateHoldingRegister(PWM_COUNTERCLOCKWISE, pwmCCWVal);
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <main+0x160>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	2013      	movs	r0, #19
 800065c:	f005 fd70 	bl	8006140 <ModbusSlave_CreateHoldingRegister>
 8000660:	4603      	mov	r3, r0
 8000662:	4a28      	ldr	r2, [pc, #160]	; (8000704 <main+0x164>)
 8000664:	6013      	str	r3, [r2, #0]
	pwmCWRegHandle = ModbusSlave_CreateHoldingRegister(PWM_CLOCKWISE, pwmCWVal);
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <main+0x168>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	2012      	movs	r0, #18
 800066e:	f005 fd67 	bl	8006140 <ModbusSlave_CreateHoldingRegister>
 8000672:	4603      	mov	r3, r0
 8000674:	4a25      	ldr	r2, [pc, #148]	; (800070c <main+0x16c>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fad6 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f84c 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f8f0 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f8be 	bl	8000804 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <main+0x170>)
 800068a:	1d3c      	adds	r4, r7, #4
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd67 	bl	8004172 <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <main+0x174>)
 80006a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f003 fd5b 	bl	8004164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x10e>
 80006b0:	200011d4 	.word	0x200011d4
 80006b4:	08000549 	.word	0x08000549
 80006b8:	080004fd 	.word	0x080004fd
 80006bc:	08000559 	.word	0x08000559
 80006c0:	200004a9 	.word	0x200004a9
 80006c4:	20000004 	.word	0x20000004
 80006c8:	200004a8 	.word	0x200004a8
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200004aa 	.word	0x200004aa
 80006d4:	20000008 	.word	0x20000008
 80006d8:	200004ae 	.word	0x200004ae
 80006dc:	20000010 	.word	0x20000010
 80006e0:	200004b0 	.word	0x200004b0
 80006e4:	20000014 	.word	0x20000014
 80006e8:	200004ac 	.word	0x200004ac
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	200004b2 	.word	0x200004b2
 80006f4:	20000018 	.word	0x20000018
 80006f8:	200004b4 	.word	0x200004b4
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	200004b8 	.word	0x200004b8
 8000704:	20000024 	.word	0x20000024
 8000708:	200004b6 	.word	0x200004b6
 800070c:	20000020 	.word	0x20000020
 8000710:	080073e0 	.word	0x080073e0
 8000714:	200011d0 	.word	0x200011d0

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0b8      	sub	sp, #224	; 0xe0
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000722:	2244      	movs	r2, #68	; 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 fe40 	bl	80073ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2288      	movs	r2, #136	; 0x88
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fe32 	bl	80073ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2310      	movs	r3, #16
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800076e:	230a      	movs	r3, #10
 8000770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000774:	2307      	movs	r3, #7
 8000776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe2e 	bl	80013ec <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000796:	f000 f8f3 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2303      	movs	r3, #3
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f9fa 	bl	8001bb8 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ca:	f000 f8d9 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fc25 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007e4:	f000 f8cc 	bl	8000980 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ec:	f000 fda8 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007f6:	f000 f8c3 	bl	8000980 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	37e0      	adds	r7, #224	; 0xe0
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART2_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART2_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x58>)
 8000848:	f002 fb7c 	bl	8002f44 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f895 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200011e4 	.word	0x200011e4
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MX_GPIO_Init+0xac>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <MX_GPIO_Init+0xac>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_GPIO_Init+0xac>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xac>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_GPIO_Init+0xac>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xac>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xac>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_GPIO_Init+0xac>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_GPIO_Init+0xac>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f000 fcf9 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_GPIO_Init+0xb0>)
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_GPIO_Init+0xb4>)
 80008e4:	f000 fb42 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e8:	2320      	movs	r3, #32
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 fb33 	bl	8000f6c <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	10210000 	.word	0x10210000
 8000918:	48000800 	.word	0x48000800

0800091c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  ModbusSlave_SetRegisterValue(&currentDrawnByMotorRegHandle, 10);
 8000924:	210a      	movs	r1, #10
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <StartDefaultTask+0x30>)
 8000928:	f005 fcba 	bl	80062a0 <ModbusSlave_SetRegisterValue>
	  ModbusSlave_SetRegisterValue(&currentValueRegHandle, 15);
 800092c:	210f      	movs	r1, #15
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <StartDefaultTask+0x34>)
 8000930:	f005 fcb6 	bl	80062a0 <ModbusSlave_SetRegisterValue>
	  ModbusSlave_SetRegisterValue(&inputVoltageRegHandle, 25);
 8000934:	2119      	movs	r1, #25
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <StartDefaultTask+0x38>)
 8000938:	f005 fcb2 	bl	80062a0 <ModbusSlave_SetRegisterValue>
	  ModbusSlave_SetRegisterValue(&activeResistanceValueRegHandle, 35);
 800093c:	2123      	movs	r1, #35	; 0x23
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <StartDefaultTask+0x3c>)
 8000940:	f005 fcae 	bl	80062a0 <ModbusSlave_SetRegisterValue>
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f003 fc60 	bl	800420a <osDelay>
	  ModbusSlave_SetRegisterValue(&currentDrawnByMotorRegHandle, 10);
 800094a:	e7eb      	b.n	8000924 <StartDefaultTask+0x8>
 800094c:	20000008 	.word	0x20000008
 8000950:	20000010 	.word	0x20000010
 8000954:	20000014 	.word	0x20000014
 8000958:	2000000c 	.word	0x2000000c

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 f97b 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_MspInit+0x4c>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_MspInit+0x4c>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 fa25 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x8c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d130      	bne.n	8000a60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_UART_MspInit+0x90>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fa8e 	bl	8000f6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2026      	movs	r0, #38	; 0x26
 8000a56:	f000 f9df 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5a:	2026      	movs	r0, #38	; 0x26
 8000a5c:	f000 f9f8 	bl	8000e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2036      	movs	r0, #54	; 0x36
 8000a86:	f000 f9c7 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a8a:	2036      	movs	r0, #54	; 0x36
 8000a8c:	f000 f9e0 	bl	8000e50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_InitTick+0x9c>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <HAL_InitTick+0x9c>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_InitTick+0x9c>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa8:	f107 0210 	add.w	r2, r7, #16
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa26 	bl	8001f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab8:	f001 f9f8 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8000abc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_InitTick+0xa0>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_InitTick+0xa4>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <HAL_InitTick+0xa8>)
 8000ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_InitTick+0xa4>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_InitTick+0xa4>)
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_InitTick+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_InitTick+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <HAL_InitTick+0xa4>)
 8000aee:	f001 ff57 	bl	80029a0 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HAL_InitTick+0xa4>)
 8000afa:	f001 ffb3 	bl	8002a64 <HAL_TIM_Base_Start_IT>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20001268 	.word	0x20001268
 8000b18:	40001000 	.word	0x40001000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <USART2_IRQHandler+0x10>)
 8000b4e:	f002 fb1f 	bl	8003190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200011e4 	.word	0x200011e4

08000b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM6_DAC_IRQHandler+0x10>)
 8000b62:	f001 ffef 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001268 	.word	0x20001268

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <SystemInit+0x5c>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <SystemInit+0x5c>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <SystemInit+0x60>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <SystemInit+0x60>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <SystemInit+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <SystemInit+0x60>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <SystemInit+0x60>)
 8000b9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ba0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <SystemInit+0x60>)
 8000ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SystemInit+0x60>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <SystemInit+0x60>)
 8000bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SystemInit+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd8:	f7ff ffca 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
	ldr	r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <LoopForever+0x16>)
	cmp	r2, r3
 8000bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f006 fba1 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c06:	f7ff fccb 	bl	80005a0 <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c0c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c10:	08007468 	.word	0x08007468
	ldr	r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c18:	20000238 	.word	0x20000238
	ldr	r2, =_sbss
 8000c1c:	20000238 	.word	0x20000238
	ldr	r3, = _ebss
 8000c20:	20001760 	.word	0x20001760

08000c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_2_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_Init+0x3c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <HAL_Init+0x3c>)
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f000 f8df 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff ff13 	bl	8000a70 <HAL_InitTick>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	e001      	b.n	8000c5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c56:	f7ff fe99 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000030 	.word	0x20000030
 8000c8c:	200012b4 	.word	0x200012b4

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200012b4 	.word	0x200012b4

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d008      	beq.n	8000e96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2204      	movs	r2, #4
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e022      	b.n	8000edc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 020e 	bic.w	r2, r2, #14
 8000ea4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 021c 	and.w	r2, r3, #28
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d005      	beq.n	8000f0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2204      	movs	r2, #4
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e029      	b.n	8000f60 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020e 	bic.w	r2, r2, #14
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 021c 	and.w	r2, r3, #28
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    }
  }
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e17f      	b.n	800127c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8171 	beq.w	8001276 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d00b      	beq.n	8000fb4 <HAL_GPIO_Init+0x48>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b03      	cmp	r3, #3
 8001020:	d118      	bne.n	8001054 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x128>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	6939      	ldr	r1, [r7, #16]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80ac 	beq.w	8001276 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_GPIO_Init+0x330>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	4a5e      	ldr	r2, [pc, #376]	; (800129c <HAL_GPIO_Init+0x330>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6613      	str	r3, [r2, #96]	; 0x60
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_GPIO_Init+0x330>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001136:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <HAL_GPIO_Init+0x334>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x242>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <HAL_GPIO_Init+0x338>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x23e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <HAL_GPIO_Init+0x33c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x23a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4d      	ldr	r2, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x340>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x236>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_GPIO_Init+0x344>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x232>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <HAL_GPIO_Init+0x348>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x22e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_GPIO_Init+0x34c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x22a>
 8001192:	2306      	movs	r3, #6
 8001194:	e00c      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 8001196:	2307      	movs	r3, #7
 8001198:	e00a      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 800119a:	2305      	movs	r3, #5
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 800119e:	2304      	movs	r3, #4
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x244>
 80011ae:	2300      	movs	r3, #0
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c0:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x334>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_GPIO_Init+0x350>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <HAL_GPIO_Init+0x350>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_GPIO_Init+0x350>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <HAL_GPIO_Init+0x350>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_GPIO_Init+0x350>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_GPIO_Init+0x350>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_GPIO_Init+0x350>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_GPIO_Init+0x350>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae78 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000c00 	.word	0x48000c00
 80012b0:	48001000 	.word	0x48001000
 80012b4:	48001400 	.word	0x48001400
 80012b8:	48001800 	.word	0x48001800
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43d9      	mvns	r1, r3
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	400b      	ands	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_PWREx_GetVoltageRange+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134e:	d130      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135c:	d038      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	e002      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d102      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f2      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d110      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e00f      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d007      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000028 	.word	0x20000028
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e3d4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4ba1      	ldr	r3, [pc, #644]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	4b9e      	ldr	r3, [pc, #632]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80e4 	beq.w	80015e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_RCC_OscConfig+0x4a>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	f040 808b 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8087 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001436:	4b93      	ldr	r3, [pc, #588]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x62>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3ac      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_RCC_OscConfig+0x7c>
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001466:	e005      	b.n	8001474 <HAL_RCC_OscConfig+0x88>
 8001468:	4b86      	ldr	r3, [pc, #536]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001474:	4293      	cmp	r3, r2
 8001476:	d223      	bcs.n	80014c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fd73 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e38d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4977      	ldr	r1, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4972      	ldr	r1, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e025      	b.n	800150c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6f      	ldr	r2, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	496a      	ldr	r1, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b69      	ldr	r3, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	4965      	ldr	r1, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fd33 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e34d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150c:	f000 fc36 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	495a      	ldr	r1, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x29c>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x2a0>)
 800152a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x2a4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fa9d 	bl	8000a70 <HAL_InitTick>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d052      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	e331      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d032      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb9a 	bl	8000c90 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fb96 	bl	8000c90 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e31a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001572:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a40      	ldr	r2, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	493b      	ldr	r1, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159c:	4b39      	ldr	r3, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	4936      	ldr	r1, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a33      	ldr	r2, [pc, #204]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb67 	bl	8000c90 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb63 	bl	8000c90 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e2e7      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x1da>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d074      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x21a>
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d10e      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d064      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d160      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e2c4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x24a>
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e01d      	b.n	8001672 <HAL_RCC_OscConfig+0x286>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x26e>
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0x286>
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x298>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fb09 	bl	8000c90 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001680:	e011      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	08007410 	.word	0x08007410
 800168c:	20000028 	.word	0x20000028
 8001690:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fafc 	bl	8000c90 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e280      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4baf      	ldr	r3, [pc, #700]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2a8>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff faec 	bl	8000c90 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fae8 	bl	8000c90 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e26c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4ba5      	ldr	r3, [pc, #660]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d0>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x310>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b99      	ldr	r3, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e249      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b93      	ldr	r3, [pc, #588]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4990      	ldr	r1, [pc, #576]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a8b      	ldr	r2, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff faa7 	bl	8000c90 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff faa3 	bl	8000c90 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e227      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	497c      	ldr	r1, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a79      	ldr	r2, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa83 	bl	8000c90 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fa7f 	bl	8000c90 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e203      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03c      	beq.n	8001832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa5e 	bl	8000c90 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fa5a 	bl	8000c90 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1de      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	e01b      	b.n	8001832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fa41 	bl	8000c90 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fa3d 	bl	8000c90 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1c1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a6 	beq.w	800198c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001884:	f7ff fa04 	bl	8000c90 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff fa00 	bl	8000c90 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e184      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	e024      	b.n	800190e <HAL_RCC_OscConfig+0x522>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d110      	bne.n	80018ee <HAL_RCC_OscConfig+0x502>
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ec:	e00f      	b.n	800190e <HAL_RCC_OscConfig+0x522>
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f9bb 	bl	8000c90 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f9b7 	bl	8000c90 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e139      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ed      	beq.n	800191e <HAL_RCC_OscConfig+0x532>
 8001942:	e01a      	b.n	800197a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f9a4 	bl	8000c90 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f9a0 	bl	8000c90 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d906      	bls.n	800196c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e122      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e8      	bne.n	800194c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8108 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 80d0 	bne.w	8001b40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019a0:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d130      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	3b01      	subs	r3, #1
 80019c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d127      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d11f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e0:	2a07      	cmp	r2, #7
 80019e2:	bf14      	ite	ne
 80019e4:	2201      	movne	r2, #1
 80019e6:	2200      	moveq	r2, #0
 80019e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d06e      	beq.n	8001af4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d069      	beq.n	8001af0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b7      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5c      	ldr	r2, [pc, #368]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7ff f924 	bl	8000c90 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f920 	bl	8000c90 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0a4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <HAL_RCC_OscConfig+0x7c8>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a8c:	0852      	lsrs	r2, r2, #1
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	0552      	lsls	r2, r2, #21
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	0652      	lsls	r2, r2, #25
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aa4:	0912      	lsrs	r2, r2, #4
 8001aa6:	0452      	lsls	r2, r2, #17
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4941      	ldr	r1, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a3e      	ldr	r2, [pc, #248]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac8:	f7ff f8e2 	bl	8000c90 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f8de 	bl	8000c90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e062      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aee:	e05a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e059      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d152      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8b6 	bl	8000c90 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e03a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x734>
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d02d      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b64:	f023 0303 	bic.w	r3, r3, #3
 8001b68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f889 	bl	8000c90 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f885 	bl	8000c90 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e009      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_OscConfig+0x7c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x796>
 8001ba0:	e001      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	f99d808c 	.word	0xf99d808c

08001bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0c8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4961      	ldr	r1, [pc, #388]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b0      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d04c      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d121      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e09e      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d115      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e092      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c40:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e086      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e07e      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 0203 	bic.w	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	493f      	ldr	r1, [pc, #252]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c72:	f7ff f80d 	bl	8000c90 <HAL_GetTick>
 8001c76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7ff f809 	bl	8000c90 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e066      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 020c 	and.w	r2, r3, #12
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d1eb      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	492c      	ldr	r1, [pc, #176]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d210      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4924      	ldr	r1, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e036      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4910      	ldr	r1, [pc, #64]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d2e:	f000 f825 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_ClockConfig+0x1b4>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	490c      	ldr	r1, [pc, #48]	; (8001d70 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	5ccb      	ldrb	r3, [r1, r3]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fe8c 	bl	8000a70 <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08007410 	.word	0x08007410
 8001d74:	20000028 	.word	0x20000028
 8001d78:	2000002c 	.word	0x2000002c

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d11e      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e004      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d134      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xac>
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	617b      	str	r3, [r7, #20]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	617b      	str	r3, [r7, #20]
      break;
 8001e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	3301      	adds	r3, #1
 8001e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	fb02 f203 	mul.w	r2, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	0e5b      	lsrs	r3, r3, #25
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	3301      	adds	r3, #1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e74:	69bb      	ldr	r3, [r7, #24]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08007428 	.word	0x08007428
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000028 	.word	0x20000028

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08007420 	.word	0x08007420

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001edc:	f7ff ffda 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08007420 	.word	0x08007420

08001f04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	220f      	movs	r2, #15
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCC_GetClockConfig+0x60>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f9d0 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
 8001f86:	e014      	b.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa0:	f7ff f9c0 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d10b      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d919      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc4:	d902      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e013      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e010      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d102      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002030:	2300      	movs	r3, #0
 8002032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d041      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204c:	d02a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800204e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002052:	d824      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205e:	d81e      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d010      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206a:	e018      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800206c:	4b86      	ldr	r3, [pc, #536]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a85      	ldr	r2, [pc, #532]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e015      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fabb 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3320      	adds	r3, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fba6 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ba:	4973      	ldr	r1, [pc, #460]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020dc:	d02a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e2:	d824      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ee:	d81e      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d010      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fa:	e018      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fc:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e015      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa73 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211a:	e00c      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3320      	adds	r3, #32
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb5e 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800212c:	e003      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	74fb      	strb	r3, [r7, #19]
      break;
 8002132:	e000      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213c:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214a:	494f      	ldr	r1, [pc, #316]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002152:	e001      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a40      	ldr	r2, [pc, #256]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
 800218c:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fd72 	bl	8000c90 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ae:	e009      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fd6e 	bl	8000c90 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	74fb      	strb	r3, [r7, #19]
        break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d15c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fd2d 	bl	8000c90 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fd29 	bl	8000c90 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	74fb      	strb	r3, [r7, #19]
            break;
 8002250:	e006      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ec      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
 8002284:	e006      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a9d      	ldr	r2, [pc, #628]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	4b98      	ldr	r3, [pc, #608]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f023 0203 	bic.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	4994      	ldr	r1, [pc, #592]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 020c 	bic.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	498c      	ldr	r1, [pc, #560]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f6:	4b87      	ldr	r3, [pc, #540]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4983      	ldr	r1, [pc, #524]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	497b      	ldr	r1, [pc, #492]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	4972      	ldr	r1, [pc, #456]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	496a      	ldr	r1, [pc, #424]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	4961      	ldr	r1, [pc, #388]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	4959      	ldr	r1, [pc, #356]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c2:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	4950      	ldr	r1, [pc, #320]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	4948      	ldr	r1, [pc, #288]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	493f      	ldr	r1, [pc, #252]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d028      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d106      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a31      	ldr	r2, [pc, #196]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
 8002454:	e011      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245e:	d10c      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8c8 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	491f      	ldr	r1, [pc, #124]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f899 	bl	80025fc <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02b      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002502:	d109      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	e014      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002520:	d10c      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f867 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02f      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002556:	4928      	ldr	r1, [pc, #160]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d10d      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	2102      	movs	r1, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f844 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d014      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
 8002582:	e011      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3320      	adds	r3, #32
 8002592:	2102      	movs	r1, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f925 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260a:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
       ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800262e:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
       ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d047      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x86>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x62>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x74>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4944      	ldr	r1, [pc, #272]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d17d      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fad4 	bl	8000c90 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ec:	f7fe fad0 	bl	8000c90 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d160      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	492a      	ldr	r1, [pc, #168]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	610b      	str	r3, [r1, #16]
 800273a:	e027      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d112      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800274a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	0211      	lsls	r1, r2, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6912      	ldr	r2, [r2, #16]
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0552      	lsls	r2, r2, #21
 800275e:	430a      	orrs	r2, r1
 8002760:	491f      	ldr	r1, [pc, #124]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
 8002766:	e011      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6952      	ldr	r2, [r2, #20]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0652      	lsls	r2, r2, #25
 8002784:	430a      	orrs	r2, r1
 8002786:	4916      	ldr	r1, [pc, #88]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fa7a 	bl	8000c90 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe fa76 	bl	8000c90 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
          break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
       ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
       ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d047      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e044      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d018      	beq.n	800286a <RCCEx_PLLSAI2_Config+0x86>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x62>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x74>
 8002844:	e020      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11d      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e01a      	b.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e013      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286a:	4b4c      	ldr	r3, [pc, #304]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002886:	e006      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e004      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	430b      	orrs	r3, r1
 80028b4:	4939      	ldr	r1, [pc, #228]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d167      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe f9e0 	bl	8000c90 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d4:	f7fe f9dc 	bl	8000c90 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	73fb      	strb	r3, [r7, #15]
        break;
 80028e6:	e005      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ef      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d14a      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	0912      	lsrs	r2, r2, #4
 8002918:	0452      	lsls	r2, r2, #17
 800291a:	430a      	orrs	r2, r1
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	614b      	str	r3, [r1, #20]
 8002922:	e011      	b.n	8002948 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	0211      	lsls	r1, r2, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	430a      	orrs	r2, r1
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f99c 	bl	8000c90 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295a:	e009      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295c:	f7fe f998 	bl	8000c90 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	73fb      	strb	r3, [r7, #15]
          break;
 800296e:	e005      	b.n	800297c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e049      	b.n	8002a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f841 	bl	8002a4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 f9f8 	bl	8002dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e04f      	b.n	8002b1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01d      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d018      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x76>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d015      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0xb4>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af2:	d011      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e008      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40013400 	.word	0x40013400
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	00010007 	.word	0x00010007

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f905 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8f7 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f908 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8db 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8cd 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8de 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8b1 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8a3 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8b4 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f887 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f879 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f88a 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fe4a 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f914 	bl	8002f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d10e      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d107      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f907 	bl	8002f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d10e      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d107      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f838 	bl	8002dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d10e      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0220 	mvn.w	r2, #32
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8c7 	bl	8002f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a40      	ldr	r2, [pc, #256]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	; (8002eec <TIM_Base_SetConfig+0x118>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <TIM_Base_SetConfig+0x11c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <TIM_Base_SetConfig+0x120>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <TIM_Base_SetConfig+0x118>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <TIM_Base_SetConfig+0x11c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <TIM_Base_SetConfig+0x120>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <TIM_Base_SetConfig+0x128>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0x9a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <TIM_Base_SetConfig+0x130>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00f      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a11      	ldr	r2, [pc, #68]	; (8002efc <TIM_Base_SetConfig+0x128>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <TIM_Base_SetConfig+0x130>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40013400 	.word	0x40013400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800

08002f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e040      	b.n	8002fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fd38 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fb1c 	bl	80035c0 <UART_SetConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fd9a 	bl	8003ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fe21 	bl	8003c18 <UART_CheckIdleState>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 8082 	bne.w	80030fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit+0x26>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07a      	b.n	8003100 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x38>
 8003014:	2302      	movs	r3, #2
 8003016:	e073      	b.n	8003100 <HAL_UART_Transmit+0x120>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fd fe2f 	bl	8000c90 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x80>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003070:	e02d      	b.n	80030ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fe14 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e039      	b.n	8003100 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800309e:	b292      	uxth	r2, r2
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e008      	b.n	80030bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b292      	uxth	r2, r2
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1cb      	bne.n	8003072 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2140      	movs	r1, #64	; 0x40
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fde0 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e005      	b.n	8003100 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311a:	2b20      	cmp	r3, #32
 800311c:	d131      	bne.n	8003182 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Receive_IT+0x22>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e02a      	b.n	8003184 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_UART_Receive_IT+0x34>
 8003138:	2302      	movs	r3, #2
 800313a:	e023      	b.n	8003184 <HAL_UART_Receive_IT+0x7c>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a0f      	ldr	r2, [pc, #60]	; (800318c <HAL_UART_Receive_IT+0x84>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003170:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	461a      	mov	r2, r3
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fe13 	bl	8003da4 <UART_Start_Receive_IT>
 800317e:	4603      	mov	r3, r0
 8003180:	e000      	b.n	8003184 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40008000 	.word	0x40008000

08003190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d113      	bne.n	80031e8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 81ce 	beq.w	800357a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
      }
      return;
 80031e6:	e1c8      	b.n	800357a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80e3 	beq.w	80033b6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4ba6      	ldr	r3, [pc, #664]	; (8003498 <HAL_UART_IRQHandler+0x308>)
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80d8 	beq.w	80033b6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_UART_IRQHandler+0xa2>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_UART_IRQHandler+0xce>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2202      	movs	r2, #2
 800324c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_UART_IRQHandler+0xfa>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2204      	movs	r2, #4
 8003278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003280:	f043 0202 	orr.w	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d011      	beq.n	80032ee <HAL_UART_IRQHandler+0x15e>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8142 	beq.w	800357e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003324:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d004      	beq.n	800333e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d031      	beq.n	80033a2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fdb8 	bl	8003eb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d123      	bne.n	800339a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003360:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a4b      	ldr	r2, [pc, #300]	; (800349c <HAL_UART_IRQHandler+0x30c>)
 8003370:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fdb6 	bl	8000ee8 <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d017      	beq.n	80033b2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800338c:	4610      	mov	r0, r2
 800338e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e00f      	b.n	80033b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd f8c4 	bl	8000520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	e00b      	b.n	80033b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd f8c0 	bl	8000520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e007      	b.n	80033b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd f8bc 	bl	8000520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033b0:	e0e5      	b.n	800357e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b2:	bf00      	nop
    return;
 80033b4:	e0e3      	b.n	800357e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 80a9 	bne.w	8003512 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80a3 	beq.w	8003512 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 809d 	beq.w	8003512 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d158      	bne.n	80034a0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80c1 	beq.w	8003582 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003406:	893a      	ldrh	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	f080 80ba 	bcs.w	8003582 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	893a      	ldrh	r2, [r7, #8]
 8003412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d12a      	bne.n	800347c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003434:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003454:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0210 	bic.w	r2, r2, #16
 8003470:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fcf8 	bl	8000e6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f889 	bl	80035a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003496:	e074      	b.n	8003582 <HAL_UART_IRQHandler+0x3f2>
 8003498:	04000120 	.word	0x04000120
 800349c:	08003f13 	.word	0x08003f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d060      	beq.n	8003586 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034d2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0210 	bic.w	r2, r2, #16
 8003504:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f84c 	bl	80035a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003510:	e039      	b.n	8003586 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_UART_IRQHandler+0x3a8>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800352e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fdf5 	bl	8004120 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003536:	e029      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01a      	beq.n	800358a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
    }
    return;
 800355c:	e015      	b.n	800358a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_UART_IRQHandler+0x3fc>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fce3 	bl	8003f3e <UART_EndTransmit_IT>
    return;
 8003578:	e008      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
      return;
 800357a:	bf00      	nop
 800357c:	e006      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
    return;
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_UART_IRQHandler+0x3fc>
    return;
 800358a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop

08003594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4bad      	ldr	r3, [pc, #692]	; (80038a0 <UART_SetConfig+0x2e0>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4aa2      	ldr	r2, [pc, #648]	; (80038a4 <UART_SetConfig+0x2e4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a99      	ldr	r2, [pc, #612]	; (80038a8 <UART_SetConfig+0x2e8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d121      	bne.n	800368a <UART_SetConfig+0xca>
 8003646:	4b99      	ldr	r3, [pc, #612]	; (80038ac <UART_SetConfig+0x2ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d817      	bhi.n	8003684 <UART_SetConfig+0xc4>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x9c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003679 	.word	0x08003679
 8003664:	08003673 	.word	0x08003673
 8003668:	0800367f 	.word	0x0800367f
 800366c:	2301      	movs	r3, #1
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e0e7      	b.n	8003842 <UART_SetConfig+0x282>
 8003672:	2302      	movs	r3, #2
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e0e4      	b.n	8003842 <UART_SetConfig+0x282>
 8003678:	2304      	movs	r3, #4
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	e0e1      	b.n	8003842 <UART_SetConfig+0x282>
 800367e:	2308      	movs	r3, #8
 8003680:	76fb      	strb	r3, [r7, #27]
 8003682:	e0de      	b.n	8003842 <UART_SetConfig+0x282>
 8003684:	2310      	movs	r3, #16
 8003686:	76fb      	strb	r3, [r7, #27]
 8003688:	e0db      	b.n	8003842 <UART_SetConfig+0x282>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a88      	ldr	r2, [pc, #544]	; (80038b0 <UART_SetConfig+0x2f0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d132      	bne.n	80036fa <UART_SetConfig+0x13a>
 8003694:	4b85      	ldr	r3, [pc, #532]	; (80038ac <UART_SetConfig+0x2ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d828      	bhi.n	80036f4 <UART_SetConfig+0x134>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0xe8>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036f5 	.word	0x080036f5
 80036b0:	080036f5 	.word	0x080036f5
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036e9 	.word	0x080036e9
 80036bc:	080036f5 	.word	0x080036f5
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080036f5 	.word	0x080036f5
 80036c8:	080036e3 	.word	0x080036e3
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036f5 	.word	0x080036f5
 80036d8:	080036ef 	.word	0x080036ef
 80036dc:	2300      	movs	r3, #0
 80036de:	76fb      	strb	r3, [r7, #27]
 80036e0:	e0af      	b.n	8003842 <UART_SetConfig+0x282>
 80036e2:	2302      	movs	r3, #2
 80036e4:	76fb      	strb	r3, [r7, #27]
 80036e6:	e0ac      	b.n	8003842 <UART_SetConfig+0x282>
 80036e8:	2304      	movs	r3, #4
 80036ea:	76fb      	strb	r3, [r7, #27]
 80036ec:	e0a9      	b.n	8003842 <UART_SetConfig+0x282>
 80036ee:	2308      	movs	r3, #8
 80036f0:	76fb      	strb	r3, [r7, #27]
 80036f2:	e0a6      	b.n	8003842 <UART_SetConfig+0x282>
 80036f4:	2310      	movs	r3, #16
 80036f6:	76fb      	strb	r3, [r7, #27]
 80036f8:	e0a3      	b.n	8003842 <UART_SetConfig+0x282>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6d      	ldr	r2, [pc, #436]	; (80038b4 <UART_SetConfig+0x2f4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d120      	bne.n	8003746 <UART_SetConfig+0x186>
 8003704:	4b69      	ldr	r3, [pc, #420]	; (80038ac <UART_SetConfig+0x2ec>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800370e:	2b30      	cmp	r3, #48	; 0x30
 8003710:	d013      	beq.n	800373a <UART_SetConfig+0x17a>
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	d814      	bhi.n	8003740 <UART_SetConfig+0x180>
 8003716:	2b20      	cmp	r3, #32
 8003718:	d009      	beq.n	800372e <UART_SetConfig+0x16e>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d810      	bhi.n	8003740 <UART_SetConfig+0x180>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <UART_SetConfig+0x168>
 8003722:	2b10      	cmp	r3, #16
 8003724:	d006      	beq.n	8003734 <UART_SetConfig+0x174>
 8003726:	e00b      	b.n	8003740 <UART_SetConfig+0x180>
 8003728:	2300      	movs	r3, #0
 800372a:	76fb      	strb	r3, [r7, #27]
 800372c:	e089      	b.n	8003842 <UART_SetConfig+0x282>
 800372e:	2302      	movs	r3, #2
 8003730:	76fb      	strb	r3, [r7, #27]
 8003732:	e086      	b.n	8003842 <UART_SetConfig+0x282>
 8003734:	2304      	movs	r3, #4
 8003736:	76fb      	strb	r3, [r7, #27]
 8003738:	e083      	b.n	8003842 <UART_SetConfig+0x282>
 800373a:	2308      	movs	r3, #8
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e080      	b.n	8003842 <UART_SetConfig+0x282>
 8003740:	2310      	movs	r3, #16
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e07d      	b.n	8003842 <UART_SetConfig+0x282>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <UART_SetConfig+0x2f8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d120      	bne.n	8003792 <UART_SetConfig+0x1d2>
 8003750:	4b56      	ldr	r3, [pc, #344]	; (80038ac <UART_SetConfig+0x2ec>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d013      	beq.n	8003786 <UART_SetConfig+0x1c6>
 800375e:	2bc0      	cmp	r3, #192	; 0xc0
 8003760:	d814      	bhi.n	800378c <UART_SetConfig+0x1cc>
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d009      	beq.n	800377a <UART_SetConfig+0x1ba>
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d810      	bhi.n	800378c <UART_SetConfig+0x1cc>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <UART_SetConfig+0x1b4>
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d006      	beq.n	8003780 <UART_SetConfig+0x1c0>
 8003772:	e00b      	b.n	800378c <UART_SetConfig+0x1cc>
 8003774:	2300      	movs	r3, #0
 8003776:	76fb      	strb	r3, [r7, #27]
 8003778:	e063      	b.n	8003842 <UART_SetConfig+0x282>
 800377a:	2302      	movs	r3, #2
 800377c:	76fb      	strb	r3, [r7, #27]
 800377e:	e060      	b.n	8003842 <UART_SetConfig+0x282>
 8003780:	2304      	movs	r3, #4
 8003782:	76fb      	strb	r3, [r7, #27]
 8003784:	e05d      	b.n	8003842 <UART_SetConfig+0x282>
 8003786:	2308      	movs	r3, #8
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	e05a      	b.n	8003842 <UART_SetConfig+0x282>
 800378c:	2310      	movs	r3, #16
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e057      	b.n	8003842 <UART_SetConfig+0x282>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a49      	ldr	r2, [pc, #292]	; (80038bc <UART_SetConfig+0x2fc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d125      	bne.n	80037e8 <UART_SetConfig+0x228>
 800379c:	4b43      	ldr	r3, [pc, #268]	; (80038ac <UART_SetConfig+0x2ec>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037aa:	d017      	beq.n	80037dc <UART_SetConfig+0x21c>
 80037ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b0:	d817      	bhi.n	80037e2 <UART_SetConfig+0x222>
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d00b      	beq.n	80037d0 <UART_SetConfig+0x210>
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d811      	bhi.n	80037e2 <UART_SetConfig+0x222>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <UART_SetConfig+0x20a>
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c6:	d006      	beq.n	80037d6 <UART_SetConfig+0x216>
 80037c8:	e00b      	b.n	80037e2 <UART_SetConfig+0x222>
 80037ca:	2300      	movs	r3, #0
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e038      	b.n	8003842 <UART_SetConfig+0x282>
 80037d0:	2302      	movs	r3, #2
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e035      	b.n	8003842 <UART_SetConfig+0x282>
 80037d6:	2304      	movs	r3, #4
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e032      	b.n	8003842 <UART_SetConfig+0x282>
 80037dc:	2308      	movs	r3, #8
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	e02f      	b.n	8003842 <UART_SetConfig+0x282>
 80037e2:	2310      	movs	r3, #16
 80037e4:	76fb      	strb	r3, [r7, #27]
 80037e6:	e02c      	b.n	8003842 <UART_SetConfig+0x282>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <UART_SetConfig+0x2e4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d125      	bne.n	800383e <UART_SetConfig+0x27e>
 80037f2:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <UART_SetConfig+0x2ec>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003800:	d017      	beq.n	8003832 <UART_SetConfig+0x272>
 8003802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003806:	d817      	bhi.n	8003838 <UART_SetConfig+0x278>
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d00b      	beq.n	8003826 <UART_SetConfig+0x266>
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d811      	bhi.n	8003838 <UART_SetConfig+0x278>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <UART_SetConfig+0x260>
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d006      	beq.n	800382c <UART_SetConfig+0x26c>
 800381e:	e00b      	b.n	8003838 <UART_SetConfig+0x278>
 8003820:	2300      	movs	r3, #0
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e00d      	b.n	8003842 <UART_SetConfig+0x282>
 8003826:	2302      	movs	r3, #2
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e00a      	b.n	8003842 <UART_SetConfig+0x282>
 800382c:	2304      	movs	r3, #4
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e007      	b.n	8003842 <UART_SetConfig+0x282>
 8003832:	2308      	movs	r3, #8
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e004      	b.n	8003842 <UART_SetConfig+0x282>
 8003838:	2310      	movs	r3, #16
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	e001      	b.n	8003842 <UART_SetConfig+0x282>
 800383e:	2310      	movs	r3, #16
 8003840:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <UART_SetConfig+0x2e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f040 8087 	bne.w	800395c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800384e:	7efb      	ldrb	r3, [r7, #27]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d837      	bhi.n	80038c4 <UART_SetConfig+0x304>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x29c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003881 	.word	0x08003881
 8003860:	080038c5 	.word	0x080038c5
 8003864:	08003889 	.word	0x08003889
 8003868:	080038c5 	.word	0x080038c5
 800386c:	0800388f 	.word	0x0800388f
 8003870:	080038c5 	.word	0x080038c5
 8003874:	080038c5 	.word	0x080038c5
 8003878:	080038c5 	.word	0x080038c5
 800387c:	08003897 	.word	0x08003897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe fb14 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003884:	6178      	str	r0, [r7, #20]
        break;
 8003886:	e022      	b.n	80038ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <UART_SetConfig+0x300>)
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	e01f      	b.n	80038ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe fa75 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8003892:	6178      	str	r0, [r7, #20]
        break;
 8003894:	e01b      	b.n	80038ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e017      	b.n	80038ce <UART_SetConfig+0x30e>
 800389e:	bf00      	nop
 80038a0:	efff69f3 	.word	0xefff69f3
 80038a4:	40008000 	.word	0x40008000
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40004800 	.word	0x40004800
 80038b8:	40004c00 	.word	0x40004c00
 80038bc:	40005000 	.word	0x40005000
 80038c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	76bb      	strb	r3, [r7, #26]
        break;
 80038cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80f1 	beq.w	8003ab8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d305      	bcc.n	80038f2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d902      	bls.n	80038f8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	76bb      	strb	r3, [r7, #26]
 80038f6:	e0df      	b.n	8003ab8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	020b      	lsls	r3, r1, #8
 800390a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800390e:	0202      	lsls	r2, r0, #8
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6849      	ldr	r1, [r1, #4]
 8003914:	0849      	lsrs	r1, r1, #1
 8003916:	4608      	mov	r0, r1
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	1814      	adds	r4, r2, r0
 800391e:	eb43 0501 	adc.w	r5, r3, r1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	4620      	mov	r0, r4
 800392e:	4629      	mov	r1, r5
 8003930:	f7fc fc4e 	bl	80001d0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003942:	d308      	bcc.n	8003956 <UART_SetConfig+0x396>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d204      	bcs.n	8003956 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e0b0      	b.n	8003ab8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	76bb      	strb	r3, [r7, #26]
 800395a:	e0ad      	b.n	8003ab8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003964:	d15c      	bne.n	8003a20 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003966:	7efb      	ldrb	r3, [r7, #27]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d828      	bhi.n	80039be <UART_SetConfig+0x3fe>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x3b4>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003999 	.word	0x08003999
 8003978:	080039a1 	.word	0x080039a1
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039af 	.word	0x080039af
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7fe fa88 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800399c:	6178      	str	r0, [r7, #20]
        break;
 800399e:	e013      	b.n	80039c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7fe fa9a 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 80039a4:	6178      	str	r0, [r7, #20]
        break;
 80039a6:	e00f      	b.n	80039c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <UART_SetConfig+0x510>)
 80039aa:	617b      	str	r3, [r7, #20]
        break;
 80039ac:	e00c      	b.n	80039c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe f9e5 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 80039b2:	6178      	str	r0, [r7, #20]
        break;
 80039b4:	e008      	b.n	80039c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ba:	617b      	str	r3, [r7, #20]
        break;
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	76bb      	strb	r3, [r7, #26]
        break;
 80039c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d074      	beq.n	8003ab8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005a      	lsls	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b0f      	cmp	r3, #15
 80039ea:	d916      	bls.n	8003a1a <UART_SetConfig+0x45a>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d212      	bcs.n	8003a1a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f023 030f 	bic.w	r3, r3, #15
 80039fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	89fa      	ldrh	r2, [r7, #14]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e04e      	b.n	8003ab8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	76bb      	strb	r3, [r7, #26]
 8003a1e:	e04b      	b.n	8003ab8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a20:	7efb      	ldrb	r3, [r7, #27]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d827      	bhi.n	8003a76 <UART_SetConfig+0x4b6>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0x46c>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7fe fa2c 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003a54:	6178      	str	r0, [r7, #20]
        break;
 8003a56:	e013      	b.n	8003a80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fa3e 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	6178      	str	r0, [r7, #20]
        break;
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <UART_SetConfig+0x510>)
 8003a62:	617b      	str	r3, [r7, #20]
        break;
 8003a64:	e00c      	b.n	8003a80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7fe f989 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8003a6a:	6178      	str	r0, [r7, #20]
        break;
 8003a6c:	e008      	b.n	8003a80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	617b      	str	r3, [r7, #20]
        break;
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	76bb      	strb	r3, [r7, #26]
        break;
 8003a7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	085a      	lsrs	r2, r3, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d908      	bls.n	8003ab4 <UART_SetConfig+0x4f4>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d204      	bcs.n	8003ab4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e001      	b.n	8003ab8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ac4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	00f42400 	.word	0x00f42400

08003ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01a      	beq.n	8003bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d10a      	bne.n	8003bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c28:	f7fd f832 	bl	8000c90 <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d10e      	bne.n	8003c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f82d 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e023      	b.n	8003ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d10e      	bne.n	8003c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f817 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00d      	b.n	8003ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	e05e      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d05a      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fc ffe4 	bl	8000c90 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11b      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ce8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e043      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d02c      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2e:	d124      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d38:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e00f      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d091      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d10e      	bne.n	8003df6 <UART_Start_Receive_IT+0x52>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <UART_Start_Receive_IT+0x48>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003de6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dea:	e02d      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003df4:	e028      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <UART_Start_Receive_IT+0x76>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <UART_Start_Receive_IT+0x6c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e0e:	e01b      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	227f      	movs	r2, #127	; 0x7f
 8003e14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e18:	e016      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e22:	d10d      	bne.n	8003e40 <UART_Start_Receive_IT+0x9c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <UART_Start_Receive_IT+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	227f      	movs	r2, #127	; 0x7f
 8003e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e34:	e008      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	223f      	movs	r2, #63	; 0x3f
 8003e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e3e:	e003      	b.n	8003e48 <UART_Start_Receive_IT+0xa4>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2222      	movs	r2, #34	; 0x22
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d107      	bne.n	8003e80 <UART_Start_Receive_IT+0xdc>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <UART_Start_Receive_IT+0x108>)
 8003e7c:	665a      	str	r2, [r3, #100]	; 0x64
 8003e7e:	e002      	b.n	8003e86 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <UART_Start_Receive_IT+0x10c>)
 8003e84:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003e9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	08004049 	.word	0x08004049
 8003eb0:	08003f71 	.word	0x08003f71

08003eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0210 	bic.w	r2, r2, #16
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7fc faf5 	bl	8000520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fb16 	bl	8003594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f7e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	2b22      	cmp	r3, #34	; 0x22
 8003f86:	d151      	bne.n	800402c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f8e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f90:	89bb      	ldrh	r3, [r7, #12]
 8003f92:	b2d9      	uxtb	r1, r3
 8003f94:	89fb      	ldrh	r3, [r7, #14]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13a      	bne.n	8004040 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fd8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10f      	bne.n	800401e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0210 	bic.w	r2, r2, #16
 800400c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fac6 	bl	80035a8 <HAL_UARTEx_RxEventCallback>
 800401c:	e002      	b.n	8004024 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc faac 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800402a:	e009      	b.n	8004040 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	8b1b      	ldrh	r3, [r3, #24]
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0208 	orr.w	r2, r2, #8
 800403c:	b292      	uxth	r2, r2
 800403e:	831a      	strh	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004056:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405c:	2b22      	cmp	r3, #34	; 0x22
 800405e:	d151      	bne.n	8004104 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004066:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800406e:	89ba      	ldrh	r2, [r7, #12]
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	4013      	ands	r3, r2
 8004074:	b29a      	uxth	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d13a      	bne.n	8004118 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10f      	bne.n	80040f6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0210 	bic.w	r2, r2, #16
 80040e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fa5a 	bl	80035a8 <HAL_UARTEx_RxEventCallback>
 80040f4:	e002      	b.n	80040fc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fa40 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004102:	e009      	b.n	8004118 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	8b1b      	ldrh	r3, [r3, #24]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0208 	orr.w	r2, r2, #8
 8004114:	b292      	uxth	r2, r2
 8004116:	831a      	strh	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	2b84      	cmp	r3, #132	; 0x84
 8004148:	d005      	beq.n	8004156 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800414a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	3303      	adds	r3, #3
 8004154:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004168:	f000 fdba 	bl	8004ce0 <vTaskStartScheduler>
  
  return osOK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	bd80      	pop	{r7, pc}

08004172 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004174:	b089      	sub	sp, #36	; 0x24
 8004176:	af04      	add	r7, sp, #16
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <osThreadCreate+0x54>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01c      	beq.n	80041c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685c      	ldr	r4, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681d      	ldr	r5, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691e      	ldr	r6, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ffc8 	bl	8004134 <makeFreeRtosPriority>
 80041a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ae:	9202      	str	r2, [sp, #8]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	9100      	str	r1, [sp, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4632      	mov	r2, r6
 80041b8:	4629      	mov	r1, r5
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 fbc8 	bl	8004950 <xTaskCreateStatic>
 80041c0:	4603      	mov	r3, r0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e01c      	b.n	8004200 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685c      	ldr	r4, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041d2:	b29e      	uxth	r6, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ffaa 	bl	8004134 <makeFreeRtosPriority>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	9200      	str	r2, [sp, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4632      	mov	r2, r6
 80041ee:	4629      	mov	r1, r5
 80041f0:	4620      	mov	r0, r4
 80041f2:	f000 fc0a 	bl	8004a0a <xTaskCreate>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800420a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <osDelay+0x16>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	e000      	b.n	8004222 <osDelay+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fd28 	bl	8004c78 <vTaskDelay>
  
  return osOK;
 8004228:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f103 0208 	add.w	r2, r3, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f04f 32ff 	mov.w	r2, #4294967295
 800424a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 0208 	add.w	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f103 0208 	add.w	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d103      	bne.n	80042f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e00c      	b.n	800430e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3308      	adds	r3, #8
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e002      	b.n	8004302 <vListInsert+0x2e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d2f6      	bcs.n	80042fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6892      	ldr	r2, [r2, #8]
 800435c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6852      	ldr	r2, [r2, #4]
 8004366:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d103      	bne.n	800437a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043c6:	f001 fb55 	bl	8005a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	3b01      	subs	r3, #1
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	441a      	add	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	22ff      	movs	r2, #255	; 0xff
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d114      	bne.n	8004446 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01a      	beq.n	800445a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3310      	adds	r3, #16
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fe9b 	bl	8005164 <xTaskRemoveFromEventList>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <xQueueGenericReset+0xcc>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	e009      	b.n	800445a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3310      	adds	r3, #16
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fef1 	bl	8004232 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff feec 	bl	8004232 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800445a:	f001 fb3b 	bl	8005ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	613b      	str	r3, [r7, #16]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3348      	adds	r3, #72	; 0x48
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fc07 	bl	8005cb8 <pvPortMalloc>
 80044aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3348      	adds	r3, #72	; 0x48
 80044ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044c4:	79fa      	ldrb	r2, [r7, #7]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f805 	bl	80044e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044d6:	69bb      	ldr	r3, [r7, #24]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e002      	b.n	8004502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800450e:	2101      	movs	r1, #1
 8004510:	69b8      	ldr	r0, [r7, #24]
 8004512:	f7ff ff43 	bl	800439c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08e      	sub	sp, #56	; 0x38
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	623b      	str	r3, [r7, #32]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	61fb      	str	r3, [r7, #28]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <xQueueGiveFromISR+0x58>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <xQueueGiveFromISR+0x5c>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueGiveFromISR+0x5e>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61bb      	str	r3, [r7, #24]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004596:	f001 fb4f 	bl	8005c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800459a:	f3ef 8211 	mrs	r2, BASEPRI
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617a      	str	r2, [r7, #20]
 80045b0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d22b      	bcs.n	800461e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d112      	bne.n	8004608 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fdb8 	bl	8005164 <xTaskRemoveFromEventList>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00e      	beq.n	8004618 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e007      	b.n	8004618 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460c:	3301      	adds	r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	b25a      	sxtb	r2, r3
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	e001      	b.n	8004622 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800462c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004630:	4618      	mov	r0, r3
 8004632:	3738      	adds	r7, #56	; 0x38
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	61fb      	str	r3, [r7, #28]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004688:	f000 ff28 	bl	80054dc <xTaskGetSchedulerState>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <xQueueSemaphoreTake+0x60>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <xQueueSemaphoreTake+0x64>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <xQueueSemaphoreTake+0x66>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61bb      	str	r3, [r7, #24]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046b8:	f001 f9dc 	bl	8005a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d024      	beq.n	8004712 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80046d8:	f001 f822 	bl	8005720 <pvTaskIncrementMutexHeldCount>
 80046dc:	4602      	mov	r2, r0
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00f      	beq.n	800470a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	3310      	adds	r3, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fd38 	bl	8005164 <xTaskRemoveFromEventList>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <xQueueSemaphoreTake+0x214>)
 80046fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800470a:	f001 f9e3 	bl	8005ad4 <vPortExitCritical>
				return pdPASS;
 800470e:	2301      	movs	r3, #1
 8004710:	e097      	b.n	8004842 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617b      	str	r3, [r7, #20]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004734:	f001 f9ce 	bl	8005ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004738:	2300      	movs	r3, #0
 800473a:	e082      	b.n	8004842 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fd6e 	bl	8005228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004750:	f001 f9c0 	bl	8005ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004754:	f000 fb24 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004758:	f001 f98c 	bl	8005a74 <vPortEnterCritical>
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d103      	bne.n	8004772 <xQueueSemaphoreTake+0x13a>
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004778:	b25b      	sxtb	r3, r3
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d103      	bne.n	8004788 <xQueueSemaphoreTake+0x150>
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004788:	f001 f9a4 	bl	8005ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478c:	463a      	mov	r2, r7
 800478e:	f107 030c 	add.w	r3, r7, #12
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fd5d 	bl	8005254 <xTaskCheckForTimeOut>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d132      	bne.n	8004806 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047a2:	f000 f8bf 	bl	8004924 <prvIsQueueEmpty>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d026      	beq.n	80047fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80047b4:	f001 f95e 	bl	8005a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 feab 	bl	8005518 <xTaskPriorityInherit>
 80047c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047c4:	f001 f986 	bl	8005ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	3324      	adds	r3, #36	; 0x24
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fca3 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047d8:	f000 f852 	bl	8004880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047dc:	f000 faee 	bl	8004dbc <xTaskResumeAll>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f47f af68 	bne.w	80046b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <xQueueSemaphoreTake+0x214>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	e75e      	b.n	80046b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80047fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047fc:	f000 f840 	bl	8004880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004800:	f000 fadc 	bl	8004dbc <xTaskResumeAll>
 8004804:	e758      	b.n	80046b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004808:	f000 f83a 	bl	8004880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800480c:	f000 fad6 	bl	8004dbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004812:	f000 f887 	bl	8004924 <prvIsQueueEmpty>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	f43f af4d 	beq.w	80046b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004824:	f001 f926 	bl	8005a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800482a:	f000 f811 	bl	8004850 <prvGetDisinheritPriorityAfterTimeout>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fee4 	bl	8005604 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800483c:	f001 f94a 	bl	8005ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004842:	4618      	mov	r0, r3
 8004844:	3738      	adds	r7, #56	; 0x38
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1c3 0307 	rsb	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e001      	b.n	8004872 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004872:	68fb      	ldr	r3, [r7, #12]
	}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004888:	f001 f8f4 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004894:	e011      	b.n	80048ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d012      	beq.n	80048c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fc5e 	bl	8005164 <xTaskRemoveFromEventList>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048ae:	f000 fd33 	bl	8005318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dce9      	bgt.n	8004896 <prvUnlockQueue+0x16>
 80048c2:	e000      	b.n	80048c6 <prvUnlockQueue+0x46>
					break;
 80048c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048ce:	f001 f901 	bl	8005ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048d2:	f001 f8cf 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048de:	e011      	b.n	8004904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3310      	adds	r3, #16
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fc39 	bl	8005164 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048f8:	f000 fd0e 	bl	8005318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	3b01      	subs	r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dce9      	bgt.n	80048e0 <prvUnlockQueue+0x60>
 800490c:	e000      	b.n	8004910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800490e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	22ff      	movs	r2, #255	; 0xff
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004918:	f001 f8dc 	bl	8005ad4 <vPortExitCritical>
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800492c:	f001 f8a2 	bl	8005a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e001      	b.n	8004942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f001 f8c7 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	; 0x38
 8004954:	af04      	add	r7, sp, #16
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	623b      	str	r3, [r7, #32]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <xTaskCreateStatic+0x46>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fb      	str	r3, [r7, #28]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004996:	2354      	movs	r3, #84	; 0x54
 8004998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b54      	cmp	r3, #84	; 0x54
 800499e:	d00a      	beq.n	80049b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	61bb      	str	r3, [r7, #24]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01e      	beq.n	80049fc <xTaskCreateStatic+0xac>
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049d6:	2300      	movs	r3, #0
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f850 	bl	8004a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f6:	f000 f8d5 	bl	8004ba4 <prvAddNewTaskToReadyList>
 80049fa:	e001      	b.n	8004a00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a00:	697b      	ldr	r3, [r7, #20]
	}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3728      	adds	r7, #40	; 0x28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b08c      	sub	sp, #48	; 0x30
 8004a0e:	af04      	add	r7, sp, #16
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f94a 	bl	8005cb8 <pvPortMalloc>
 8004a24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a2c:	2054      	movs	r0, #84	; 0x54
 8004a2e:	f001 f943 	bl	8005cb8 <pvPortMalloc>
 8004a32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a40:	e005      	b.n	8004a4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f001 fa04 	bl	8005e50 <vPortFree>
 8004a48:	e001      	b.n	8004a4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d017      	beq.n	8004a84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f80e 	bl	8004a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a78:	69f8      	ldr	r0, [r7, #28]
 8004a7a:	f000 f893 	bl	8004ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e002      	b.n	8004a8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	3b01      	subs	r3, #1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f023 0307 	bic.w	r3, r3, #7
 8004aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	617b      	str	r3, [r7, #20]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01f      	beq.n	8004b22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e012      	b.n	8004b0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	7819      	ldrb	r1, [r3, #0]
 8004af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	3334      	adds	r3, #52	; 0x34
 8004af8:	460a      	mov	r2, r1
 8004afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b0f      	cmp	r3, #15
 8004b12:	d9e9      	bls.n	8004ae8 <prvInitialiseNewTask+0x54>
 8004b14:	e000      	b.n	8004b18 <prvInitialiseNewTask+0x84>
			{
				break;
 8004b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b20:	e003      	b.n	8004b2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d901      	bls.n	8004b34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b30:	2306      	movs	r3, #6
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	2200      	movs	r2, #0
 8004b44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fb91 	bl	8004272 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	3318      	adds	r3, #24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fb8c 	bl	8004272 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	f1c3 0207 	rsb	r2, r3, #7
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2200      	movs	r2, #0
 8004b74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68f9      	ldr	r1, [r7, #12]
 8004b82:	69b8      	ldr	r0, [r7, #24]
 8004b84:	f000 fe46 	bl	8005814 <pxPortInitialiseStack>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bac:	f000 ff62 	bl	8005a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <prvAddNewTaskToReadyList+0xb8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <prvAddNewTaskToReadyList+0xb8>)
 8004bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <prvAddNewTaskToReadyList+0xbc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bc2:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <prvAddNewTaskToReadyList+0xbc>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <prvAddNewTaskToReadyList+0xb8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d110      	bne.n	8004bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bd0:	f000 fbc6 	bl	8005360 <prvInitialiseTaskLists>
 8004bd4:	e00d      	b.n	8004bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bd6:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <prvAddNewTaskToReadyList+0xc0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <prvAddNewTaskToReadyList+0xbc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d802      	bhi.n	8004bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <prvAddNewTaskToReadyList+0xbc>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <prvAddNewTaskToReadyList+0xc4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <prvAddNewTaskToReadyList+0xc4>)
 8004bfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <prvAddNewTaskToReadyList+0xc8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <prvAddNewTaskToReadyList+0xc8>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <prvAddNewTaskToReadyList+0xcc>)
 8004c1c:	441a      	add	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7ff fb31 	bl	800428c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c2a:	f000 ff53 	bl	8005ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <prvAddNewTaskToReadyList+0xc0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <prvAddNewTaskToReadyList+0xbc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d207      	bcs.n	8004c54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <prvAddNewTaskToReadyList+0xd0>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	200005bc 	.word	0x200005bc
 8004c60:	200004bc 	.word	0x200004bc
 8004c64:	200005c8 	.word	0x200005c8
 8004c68:	200005d8 	.word	0x200005d8
 8004c6c:	200005c4 	.word	0x200005c4
 8004c70:	200004c0 	.word	0x200004c0
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d017      	beq.n	8004cba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <vTaskDelay+0x60>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <vTaskDelay+0x30>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ca8:	f000 f87a 	bl	8004da0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cac:	2100      	movs	r1, #0
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fd4a 	bl	8005748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cb4:	f000 f882 	bl	8004dbc <xTaskResumeAll>
 8004cb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <vTaskDelay+0x64>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	200005e4 	.word	0x200005e4
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cee:	463a      	mov	r2, r7
 8004cf0:	1d39      	adds	r1, r7, #4
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fbe6 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	9202      	str	r2, [sp, #8]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	460a      	mov	r2, r1
 8004d0e:	491e      	ldr	r1, [pc, #120]	; (8004d88 <vTaskStartScheduler+0xa8>)
 8004d10:	481e      	ldr	r0, [pc, #120]	; (8004d8c <vTaskStartScheduler+0xac>)
 8004d12:	f7ff fe1d 	bl	8004950 <xTaskCreateStatic>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <vTaskStartScheduler+0xb0>)
 8004d1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <vTaskStartScheduler+0xb0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e001      	b.n	8004d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d116      	bne.n	8004d62 <vTaskStartScheduler+0x82>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	613b      	str	r3, [r7, #16]
}
 8004d46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <vTaskStartScheduler+0xb4>)
 8004d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <vTaskStartScheduler+0xb8>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <vTaskStartScheduler+0xbc>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d5c:	f000 fde8 	bl	8005930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d60:	e00e      	b.n	8004d80 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d10a      	bne.n	8004d80 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	60fb      	str	r3, [r7, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vTaskStartScheduler+0x9e>
}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	080073fc 	.word	0x080073fc
 8004d8c:	08005331 	.word	0x08005331
 8004d90:	200005e0 	.word	0x200005e0
 8004d94:	200005dc 	.word	0x200005dc
 8004d98:	200005c8 	.word	0x200005c8
 8004d9c:	200005c0 	.word	0x200005c0

08004da0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <vTaskSuspendAll+0x18>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <vTaskSuspendAll+0x18>)
 8004dac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	200005e4 	.word	0x200005e4

08004dbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	603b      	str	r3, [r7, #0]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de8:	f000 fe44 	bl	8005a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004df4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d161      	bne.n	8004ec2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfe:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <xTaskResumeAll+0x118>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d05d      	beq.n	8004ec2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e06:	e02e      	b.n	8004e66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <xTaskResumeAll+0x11c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3318      	adds	r3, #24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fa96 	bl	8004346 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fa91 	bl	8004346 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <xTaskResumeAll+0x120>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <xTaskResumeAll+0x120>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <xTaskResumeAll+0x124>)
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7ff fa1d 	bl	800428c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <xTaskResumeAll+0x128>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskResumeAll+0x11c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cc      	bne.n	8004e08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e74:	f000 fb12 	bl	800549c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <xTaskResumeAll+0x130>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e84:	f000 f836 	bl	8004ef4 <xTaskIncrementTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xTaskResumeAll+0x130>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <xTaskResumeAll+0x134>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f000 fe07 	bl	8005ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200005e4 	.word	0x200005e4
 8004ed4:	200005bc 	.word	0x200005bc
 8004ed8:	2000057c 	.word	0x2000057c
 8004edc:	200005c4 	.word	0x200005c4
 8004ee0:	200004c0 	.word	0x200004c0
 8004ee4:	200004bc 	.word	0x200004bc
 8004ee8:	200005d0 	.word	0x200005d0
 8004eec:	200005cc 	.word	0x200005cc
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <xTaskIncrementTick+0x144>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 808e 	bne.w	8005024 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f08:	4b4c      	ldr	r3, [pc, #304]	; (800503c <xTaskIncrementTick+0x148>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f10:	4a4a      	ldr	r2, [pc, #296]	; (800503c <xTaskIncrementTick+0x148>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d120      	bne.n	8004f5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f1c:	4b48      	ldr	r3, [pc, #288]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <xTaskIncrementTick+0x48>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xTaskIncrementTick+0x46>
 8004f3c:	4b40      	ldr	r3, [pc, #256]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	4b40      	ldr	r3, [pc, #256]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3e      	ldr	r2, [pc, #248]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4a3e      	ldr	r2, [pc, #248]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b3d      	ldr	r3, [pc, #244]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a3c      	ldr	r2, [pc, #240]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	f000 fa9f 	bl	800549c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <xTaskIncrementTick+0x158>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d348      	bcc.n	8004ffa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f68:	4b35      	ldr	r3, [pc, #212]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f72:	4b36      	ldr	r3, [pc, #216]	; (800504c <xTaskIncrementTick+0x158>)
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	601a      	str	r2, [r3, #0]
					break;
 8004f7a:	e03e      	b.n	8004ffa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d203      	bcs.n	8004f9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f94:	4a2d      	ldr	r2, [pc, #180]	; (800504c <xTaskIncrementTick+0x158>)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f9a:	e02e      	b.n	8004ffa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff f9d0 	bl	8004346 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	3318      	adds	r3, #24
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff f9c7 	bl	8004346 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	4a22      	ldr	r2, [pc, #136]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <xTaskIncrementTick+0x160>)
 8004fd8:	441a      	add	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7ff f953 	bl	800428c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <xTaskIncrementTick+0x164>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3b9      	bcc.n	8004f68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff8:	e7b6      	b.n	8004f68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <xTaskIncrementTick+0x164>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4914      	ldr	r1, [pc, #80]	; (8005054 <xTaskIncrementTick+0x160>)
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d901      	bls.n	8005016 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <xTaskIncrementTick+0x168>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e004      	b.n	800502e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <xTaskIncrementTick+0x16c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <xTaskIncrementTick+0x16c>)
 800502c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800502e:	697b      	ldr	r3, [r7, #20]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	200005e4 	.word	0x200005e4
 800503c:	200005c0 	.word	0x200005c0
 8005040:	20000574 	.word	0x20000574
 8005044:	20000578 	.word	0x20000578
 8005048:	200005d4 	.word	0x200005d4
 800504c:	200005dc 	.word	0x200005dc
 8005050:	200005c4 	.word	0x200005c4
 8005054:	200004c0 	.word	0x200004c0
 8005058:	200004bc 	.word	0x200004bc
 800505c:	200005d0 	.word	0x200005d0
 8005060:	200005cc 	.word	0x200005cc

08005064 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <vTaskSwitchContext+0xa4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <vTaskSwitchContext+0xa8>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005078:	e03f      	b.n	80050fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800507a:	4b24      	ldr	r3, [pc, #144]	; (800510c <vTaskSwitchContext+0xa8>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005080:	4b23      	ldr	r3, [pc, #140]	; (8005110 <vTaskSwitchContext+0xac>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	fab3 f383 	clz	r3, r3
 800508c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	f1c3 031f 	rsb	r3, r3, #31
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	491f      	ldr	r1, [pc, #124]	; (8005114 <vTaskSwitchContext+0xb0>)
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <vTaskSwitchContext+0x5a>
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4a12      	ldr	r2, [pc, #72]	; (8005114 <vTaskSwitchContext+0xb0>)
 80050cc:	4413      	add	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3308      	adds	r3, #8
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d104      	bne.n	80050f0 <vTaskSwitchContext+0x8c>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <vTaskSwitchContext+0xb4>)
 80050f8:	6013      	str	r3, [r2, #0]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	200005e4 	.word	0x200005e4
 800510c:	200005d0 	.word	0x200005d0
 8005110:	200005c4 	.word	0x200005c4
 8005114:	200004c0 	.word	0x200004c0
 8005118:	200004bc 	.word	0x200004bc

0800511c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vTaskPlaceOnEventList+0x44>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3318      	adds	r3, #24
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff f8c2 	bl	80042d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005150:	2101      	movs	r1, #1
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 faf8 	bl	8005748 <prvAddCurrentTaskToDelayedList>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200004bc 	.word	0x200004bc

08005164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60fb      	str	r3, [r7, #12]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3318      	adds	r3, #24
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f8d6 	bl	8004346 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <xTaskRemoveFromEventList+0xac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11c      	bne.n	80051dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff f8cd 	bl	8004346 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2201      	movs	r2, #1
 80051b2:	409a      	lsls	r2, r3
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <xTaskRemoveFromEventList+0xb0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	4a16      	ldr	r2, [pc, #88]	; (8005214 <xTaskRemoveFromEventList+0xb0>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <xTaskRemoveFromEventList+0xb4>)
 80051cc:	441a      	add	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7ff f859 	bl	800428c <vListInsertEnd>
 80051da:	e005      	b.n	80051e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3318      	adds	r3, #24
 80051e0:	4619      	mov	r1, r3
 80051e2:	480e      	ldr	r0, [pc, #56]	; (800521c <xTaskRemoveFromEventList+0xb8>)
 80051e4:	f7ff f852 	bl	800428c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <xTaskRemoveFromEventList+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d905      	bls.n	8005202 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <xTaskRemoveFromEventList+0xc0>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e001      	b.n	8005206 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005206:	697b      	ldr	r3, [r7, #20]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200005e4 	.word	0x200005e4
 8005214:	200005c4 	.word	0x200005c4
 8005218:	200004c0 	.word	0x200004c0
 800521c:	2000057c 	.word	0x2000057c
 8005220:	200004bc 	.word	0x200004bc
 8005224:	200005d0 	.word	0x200005d0

08005228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <vTaskInternalSetTimeOutState+0x24>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <vTaskInternalSetTimeOutState+0x28>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	200005d4 	.word	0x200005d4
 8005250:	200005c0 	.word	0x200005c0

08005254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	613b      	str	r3, [r7, #16]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005296:	f000 fbed 	bl	8005a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <xTaskCheckForTimeOut+0xbc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e023      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <xTaskCheckForTimeOut+0xc0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d007      	beq.n	80052d6 <xTaskCheckForTimeOut+0x82>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e015      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d20b      	bcs.n	80052f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff9b 	bl	8005228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e004      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005302:	f000 fbe7 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 8005306:	69fb      	ldr	r3, [r7, #28]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200005c0 	.word	0x200005c0
 8005314:	200005d4 	.word	0x200005d4

08005318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <vTaskMissedYield+0x14>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	200005d0 	.word	0x200005d0

08005330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005338:	f000 f852 	bl	80053e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <prvIdleTask+0x28>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d9f9      	bls.n	8005338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <prvIdleTask+0x2c>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005354:	e7f0      	b.n	8005338 <prvIdleTask+0x8>
 8005356:	bf00      	nop
 8005358:	200004c0 	.word	0x200004c0
 800535c:	e000ed04 	.word	0xe000ed04

08005360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	e00c      	b.n	8005386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a12      	ldr	r2, [pc, #72]	; (80053c0 <prvInitialiseTaskLists+0x60>)
 8005378:	4413      	add	r3, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe ff59 	bl	8004232 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3301      	adds	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b06      	cmp	r3, #6
 800538a:	d9ef      	bls.n	800536c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800538c:	480d      	ldr	r0, [pc, #52]	; (80053c4 <prvInitialiseTaskLists+0x64>)
 800538e:	f7fe ff50 	bl	8004232 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005392:	480d      	ldr	r0, [pc, #52]	; (80053c8 <prvInitialiseTaskLists+0x68>)
 8005394:	f7fe ff4d 	bl	8004232 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005398:	480c      	ldr	r0, [pc, #48]	; (80053cc <prvInitialiseTaskLists+0x6c>)
 800539a:	f7fe ff4a 	bl	8004232 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800539e:	480c      	ldr	r0, [pc, #48]	; (80053d0 <prvInitialiseTaskLists+0x70>)
 80053a0:	f7fe ff47 	bl	8004232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053a4:	480b      	ldr	r0, [pc, #44]	; (80053d4 <prvInitialiseTaskLists+0x74>)
 80053a6:	f7fe ff44 	bl	8004232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <prvInitialiseTaskLists+0x78>)
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <prvInitialiseTaskLists+0x64>)
 80053ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <prvInitialiseTaskLists+0x7c>)
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <prvInitialiseTaskLists+0x68>)
 80053b4:	601a      	str	r2, [r3, #0]
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200004c0 	.word	0x200004c0
 80053c4:	2000054c 	.word	0x2000054c
 80053c8:	20000560 	.word	0x20000560
 80053cc:	2000057c 	.word	0x2000057c
 80053d0:	20000590 	.word	0x20000590
 80053d4:	200005a8 	.word	0x200005a8
 80053d8:	20000574 	.word	0x20000574
 80053dc:	20000578 	.word	0x20000578

080053e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053e6:	e019      	b.n	800541c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053e8:	f000 fb44 	bl	8005a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <prvCheckTasksWaitingTermination+0x50>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe ffa4 	bl	8004346 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <prvCheckTasksWaitingTermination+0x54>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3b01      	subs	r3, #1
 8005404:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <prvCheckTasksWaitingTermination+0x54>)
 8005406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 8005410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005412:	f000 fb5f 	bl	8005ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f810 	bl	800543c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e1      	bne.n	80053e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000590 	.word	0x20000590
 8005434:	200005bc 	.word	0x200005bc
 8005438:	200005a4 	.word	0x200005a4

0800543c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fcfc 	bl	8005e50 <vPortFree>
				vPortFree( pxTCB );
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fcf9 	bl	8005e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800545e:	e018      	b.n	8005492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005466:	2b01      	cmp	r3, #1
 8005468:	d103      	bne.n	8005472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fcf0 	bl	8005e50 <vPortFree>
	}
 8005470:	e00f      	b.n	8005492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005478:	2b02      	cmp	r3, #2
 800547a:	d00a      	beq.n	8005492 <prvDeleteTCB+0x56>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60fb      	str	r3, [r7, #12]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <prvDeleteTCB+0x54>
	}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <prvResetNextTaskUnblockTime+0x38>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvResetNextTaskUnblockTime+0x3c>)
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295
 80054b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054b4:	e008      	b.n	80054c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <prvResetNextTaskUnblockTime+0x38>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <prvResetNextTaskUnblockTime+0x3c>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20000574 	.word	0x20000574
 80054d8:	200005dc 	.word	0x200005dc

080054dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <xTaskGetSchedulerState+0x34>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054ea:	2301      	movs	r3, #1
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e008      	b.n	8005502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <xTaskGetSchedulerState+0x38>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054f8:	2302      	movs	r3, #2
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	e001      	b.n	8005502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005502:	687b      	ldr	r3, [r7, #4]
	}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	200005c8 	.word	0x200005c8
 8005514:	200005e4 	.word	0x200005e4

08005518 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d05e      	beq.n	80055ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <xTaskPriorityInherit+0xe0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d24e      	bcs.n	80055da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db06      	blt.n	8005552 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005544:	4b2c      	ldr	r3, [pc, #176]	; (80055f8 <xTaskPriorityInherit+0xe0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f1c3 0207 	rsb	r2, r3, #7
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6959      	ldr	r1, [r3, #20]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4a26      	ldr	r2, [pc, #152]	; (80055fc <xTaskPriorityInherit+0xe4>)
 8005564:	4413      	add	r3, r2
 8005566:	4299      	cmp	r1, r3
 8005568:	d12f      	bne.n	80055ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fee9 	bl	8004346 <uxListRemove>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	2201      	movs	r2, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43da      	mvns	r2, r3
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <xTaskPriorityInherit+0xe8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4013      	ands	r3, r2
 800558c:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <xTaskPriorityInherit+0xe8>)
 800558e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <xTaskPriorityInherit+0xe0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	2201      	movs	r2, #1
 80055a0:	409a      	lsls	r2, r3
 80055a2:	4b17      	ldr	r3, [pc, #92]	; (8005600 <xTaskPriorityInherit+0xe8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <xTaskPriorityInherit+0xe8>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a10      	ldr	r2, [pc, #64]	; (80055fc <xTaskPriorityInherit+0xe4>)
 80055ba:	441a      	add	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fe62 	bl	800428c <vListInsertEnd>
 80055c8:	e004      	b.n	80055d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <xTaskPriorityInherit+0xe0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e008      	b.n	80055ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <xTaskPriorityInherit+0xe0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d201      	bcs.n	80055ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055ec:	68fb      	ldr	r3, [r7, #12]
	}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200004bc 	.word	0x200004bc
 80055fc:	200004c0 	.word	0x200004c0
 8005600:	200005c4 	.word	0x200005c4

08005604 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005612:	2301      	movs	r3, #1
 8005614:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d077      	beq.n	800570c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d902      	bls.n	800564a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e002      	b.n	8005650 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	429a      	cmp	r2, r3
 8005658:	d058      	beq.n	800570c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	d153      	bne.n	800570c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	429a      	cmp	r2, r3
 800566c:	d10a      	bne.n	8005684 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60bb      	str	r3, [r7, #8]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	db04      	blt.n	80056a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f1c3 0207 	rsb	r2, r3, #7
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056b2:	4413      	add	r3, r2
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d129      	bne.n	800570c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fe42 	bl	8004346 <uxListRemove>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	2201      	movs	r2, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4013      	ands	r3, r2
 80056da:	4a10      	ldr	r2, [pc, #64]	; (800571c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	2201      	movs	r2, #1
 80056e4:	409a      	lsls	r2, r3
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	4a0b      	ldr	r2, [pc, #44]	; (800571c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a06      	ldr	r2, [pc, #24]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056fe:	441a      	add	r2, r3
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe fdc0 	bl	800428c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800570c:	bf00      	nop
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	200004bc 	.word	0x200004bc
 8005718:	200004c0 	.word	0x200004c0
 800571c:	200005c4 	.word	0x200005c4

08005720 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005724:	4b07      	ldr	r3, [pc, #28]	; (8005744 <pvTaskIncrementMutexHeldCount+0x24>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <pvTaskIncrementMutexHeldCount+0x24>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005732:	3201      	adds	r2, #1
 8005734:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005736:	4b03      	ldr	r3, [pc, #12]	; (8005744 <pvTaskIncrementMutexHeldCount+0x24>)
 8005738:	681b      	ldr	r3, [r3, #0]
	}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	200004bc 	.word	0x200004bc

08005748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005752:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3304      	adds	r3, #4
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fdf1 	bl	8004346 <uxListRemove>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	2201      	movs	r2, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	4b21      	ldr	r3, [pc, #132]	; (8005800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4013      	ands	r3, r2
 800577e:	4a20      	ldr	r2, [pc, #128]	; (8005800 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d10a      	bne.n	80057a0 <prvAddCurrentTaskToDelayedList+0x58>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	481a      	ldr	r0, [pc, #104]	; (8005804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800579a:	f7fe fd77 	bl	800428c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800579e:	e026      	b.n	80057ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d209      	bcs.n	80057cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7fe fd85 	bl	80042d4 <vListInsert>
}
 80057ca:	e010      	b.n	80057ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <prvAddCurrentTaskToDelayedList+0xc4>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe fd7b 	bl	80042d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d202      	bcs.n	80057ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6013      	str	r3, [r2, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200005c0 	.word	0x200005c0
 80057fc:	200004bc 	.word	0x200004bc
 8005800:	200005c4 	.word	0x200005c4
 8005804:	200005a8 	.word	0x200005a8
 8005808:	20000578 	.word	0x20000578
 800580c:	20000574 	.word	0x20000574
 8005810:	200005dc 	.word	0x200005dc

08005814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b04      	subs	r3, #4
 8005824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800582c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b04      	subs	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3b04      	subs	r3, #4
 8005842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <pxPortInitialiseStack+0x64>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b14      	subs	r3, #20
 800584e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b04      	subs	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f06f 0202 	mvn.w	r2, #2
 8005862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b20      	subs	r3, #32
 8005868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	0800587d 	.word	0x0800587d

0800587c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <prvTaskExitError+0x54>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d00a      	beq.n	80058a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <prvTaskExitError+0x28>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60bb      	str	r3, [r7, #8]
}
 80058b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058ba:	bf00      	nop
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0fc      	beq.n	80058bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000034 	.word	0x20000034
	...

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	4770      	bx	lr
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst2>:
 8005900:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005908:	4808      	ldr	r0, [pc, #32]	; (800592c <prvPortStartFirstTask+0x24>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8814 	msr	CONTROL, r0
 800591a:	b662      	cpsie	i
 800591c:	b661      	cpsie	f
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	df00      	svc	0
 8005928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800592a:	bf00      	nop
 800592c:	e000ed08 	.word	0xe000ed08

08005930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <xPortStartScheduler+0x120>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a46      	ldr	r2, [pc, #280]	; (8005a54 <xPortStartScheduler+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10a      	bne.n	8005956 <xPortStartScheduler+0x26>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <xPortStartScheduler+0x120>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3f      	ldr	r2, [pc, #252]	; (8005a58 <xPortStartScheduler+0x128>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10a      	bne.n	8005976 <xPortStartScheduler+0x46>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <xPortStartScheduler+0x12c>)
 8005978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <xPortStartScheduler+0x130>)
 800599c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a4:	e009      	b.n	80059ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b80      	cmp	r3, #128	; 0x80
 80059c4:	d0ef      	beq.n	80059a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <xPortStartScheduler+0x134>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1c3 0307 	rsb	r3, r3, #7
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d00a      	beq.n	80059e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fa:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <xPortStartScheduler+0x134>)
 80059fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a1e:	f000 f8dd 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <xPortStartScheduler+0x13c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a28:	f000 f8fc 	bl	8005c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a38:	f7ff ff66 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a3c:	f7ff fb12 	bl	8005064 <vTaskSwitchContext>
	prvTaskExitError();
 8005a40:	f7ff ff1c 	bl	800587c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	e000ed00 	.word	0xe000ed00
 8005a54:	410fc271 	.word	0x410fc271
 8005a58:	410fc270 	.word	0x410fc270
 8005a5c:	e000e400 	.word	0xe000e400
 8005a60:	200005e8 	.word	0x200005e8
 8005a64:	200005ec 	.word	0x200005ec
 8005a68:	e000ed20 	.word	0xe000ed20
 8005a6c:	20000034 	.word	0x20000034
 8005a70:	e000ef34 	.word	0xe000ef34

08005a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <vPortEnterCritical+0x58>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <vPortEnterCritical+0x58>)
 8005a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <vPortEnterCritical+0x58>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10f      	bne.n	8005ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortEnterCritical+0x5c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	603b      	str	r3, [r7, #0]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <vPortEnterCritical+0x4a>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000034 	.word	0x20000034
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <vPortExitCritical+0x50>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <vPortExitCritical+0x24>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	607b      	str	r3, [r7, #4]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <vPortExitCritical+0x50>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <vPortExitCritical+0x50>)
 8005b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <vPortExitCritical+0x42>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f383 8811 	msr	BASEPRI, r3
}
 8005b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000034 	.word	0x20000034
	...

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f01e 0f10 	tst.w	lr, #16
 8005b40:	bf08      	it	eq
 8005b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b54:	f380 8811 	msr	BASEPRI, r0
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f7ff fa80 	bl	8005064 <vTaskSwitchContext>
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f380 8811 	msr	BASEPRI, r0
 8005b6c:	bc09      	pop	{r0, r3}
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	6808      	ldr	r0, [r1, #0]
 8005b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b76:	f01e 0f10 	tst.w	lr, #16
 8005b7a:	bf08      	it	eq
 8005b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b80:	f380 8809 	msr	PSP, r0
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst>:
 8005b90:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7ff f99f 	bl	8004ef4 <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <SysTick_Handler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <vPortSetupTimerInterrupt+0x44>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010
 8005c14:	e000e018 	.word	0xe000e018
 8005c18:	20000028 	.word	0x20000028
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	e000e014 	.word	0xe000e014

08005c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c34 <vPortEnableVFP+0x10>
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c2e:	6001      	str	r1, [r0, #0]
 8005c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c32:	bf00      	nop
 8005c34:	e000ed88 	.word	0xe000ed88

08005c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d914      	bls.n	8005c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <vPortValidateInterruptPriority+0x70>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <vPortValidateInterruptPriority+0x74>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	7afa      	ldrb	r2, [r7, #11]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20a      	bcs.n	8005c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <vPortValidateInterruptPriority+0x78>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <vPortValidateInterruptPriority+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d90a      	bls.n	8005c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	603b      	str	r3, [r7, #0]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vPortValidateInterruptPriority+0x60>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000e3f0 	.word	0xe000e3f0
 8005cac:	200005e8 	.word	0x200005e8
 8005cb0:	e000ed0c 	.word	0xe000ed0c
 8005cb4:	200005ec 	.word	0x200005ec

08005cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc4:	f7ff f86c 	bl	8004da0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <pvPortMalloc+0x180>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cd0:	f000 f920 	bl	8005f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd4:	4b59      	ldr	r3, [pc, #356]	; (8005e3c <pvPortMalloc+0x184>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 8093 	bne.w	8005e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01d      	beq.n	8005d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ce8:	2208      	movs	r2, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f023 0307 	bic.w	r3, r3, #7
 8005d00:	3308      	adds	r3, #8
 8005d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <pvPortMalloc+0x6c>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	617b      	str	r3, [r7, #20]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d06e      	beq.n	8005e08 <pvPortMalloc+0x150>
 8005d2a:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <pvPortMalloc+0x188>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d869      	bhi.n	8005e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d34:	4b43      	ldr	r3, [pc, #268]	; (8005e44 <pvPortMalloc+0x18c>)
 8005d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d38:	4b42      	ldr	r3, [pc, #264]	; (8005e44 <pvPortMalloc+0x18c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3e:	e004      	b.n	8005d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <pvPortMalloc+0xa4>
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f1      	bne.n	8005d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d5c:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <pvPortMalloc+0x180>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d050      	beq.n	8005e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	2308      	movs	r3, #8
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d91f      	bls.n	8005dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <pvPortMalloc+0xf8>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	613b      	str	r3, [r7, #16]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f000 f908 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <pvPortMalloc+0x188>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <pvPortMalloc+0x188>)
 8005dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <pvPortMalloc+0x188>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <pvPortMalloc+0x190>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d203      	bcs.n	8005dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <pvPortMalloc+0x188>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <pvPortMalloc+0x190>)
 8005de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <pvPortMalloc+0x184>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <pvPortMalloc+0x194>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <pvPortMalloc+0x194>)
 8005e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e08:	f7fe ffd8 	bl	8004dbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <pvPortMalloc+0x174>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <pvPortMalloc+0x172>
	return pvReturn;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3728      	adds	r7, #40	; 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200011b0 	.word	0x200011b0
 8005e3c:	200011c4 	.word	0x200011c4
 8005e40:	200011b4 	.word	0x200011b4
 8005e44:	200011a8 	.word	0x200011a8
 8005e48:	200011b8 	.word	0x200011b8
 8005e4c:	200011bc 	.word	0x200011bc

08005e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d04d      	beq.n	8005efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e62:	2308      	movs	r3, #8
 8005e64:	425b      	negs	r3, r3
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <vPortFree+0xb8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <vPortFree+0x44>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60fb      	str	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <vPortFree+0x62>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60bb      	str	r3, [r7, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <vPortFree+0xb8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <vPortFree+0xb8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ed8:	f7fe ff62 	bl	8004da0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <vPortFree+0xbc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <vPortFree+0xbc>)
 8005ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eea:	6938      	ldr	r0, [r7, #16]
 8005eec:	f000 f874 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <vPortFree+0xc0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a06      	ldr	r2, [pc, #24]	; (8005f10 <vPortFree+0xc0>)
 8005ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005efa:	f7fe ff5f 	bl	8004dbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200011c4 	.word	0x200011c4
 8005f0c:	200011b4 	.word	0x200011b4
 8005f10:	200011c0 	.word	0x200011c0

08005f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f20:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <prvHeapInit+0xac>)
 8005f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <prvHeapInit+0xac>)
 8005f44:	4413      	add	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <prvHeapInit+0xb0>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <prvHeapInit+0xb0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f60:	2208      	movs	r2, #8
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <prvHeapInit+0xb8>)
 8005fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <prvHeapInit+0xbc>)
 8005faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <prvHeapInit+0xc0>)
 8005fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	200005f0 	.word	0x200005f0
 8005fc4:	200011a8 	.word	0x200011a8
 8005fc8:	200011b0 	.word	0x200011b0
 8005fcc:	200011b8 	.word	0x200011b8
 8005fd0:	200011b4 	.word	0x200011b4
 8005fd4:	200011c4 	.word	0x200011c4

08005fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <prvInsertBlockIntoFreeList+0xac>)
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e002      	b.n	8005fec <prvInsertBlockIntoFreeList+0x14>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d8f7      	bhi.n	8005fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d108      	bne.n	800601a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d118      	bne.n	8006060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <prvInsertBlockIntoFreeList+0xb0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d00d      	beq.n	8006056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e008      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvInsertBlockIntoFreeList+0xb0>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e003      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d002      	beq.n	8006076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	200011a8 	.word	0x200011a8
 8006088:	200011b0 	.word	0x200011b0

0800608c <ModbusSlave_CreateCoilStatus>:
ModbusRegister 	_inputRegisters[MODBUS_SLAVE_INPUT_REGISTER_SIZE];

ModbusRegister* ModbusSlave_GetRegister( const ModbusRegister_Handle_t* handle );
ModbusRegister* ModbusSlave_GetRegisterByAddress( ModbusRegisterType type, uint16_t address );

ModbusRegister_Handle_t ModbusSlave_CreateCoilStatus( uint16_t address, bool value ){
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	460a      	mov	r2, r1
 8006096:	80fb      	strh	r3, [r7, #6]
 8006098:	4613      	mov	r3, r2
 800609a:	717b      	strb	r3, [r7, #5]
	ModbusRegister_Handle_t result;
	result.id = -1;
 800609c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060a0:	81bb      	strh	r3, [r7, #12]
	for( int k = 0; k < MODBUS_SLAVE_COIL_STATUS_SIZE; k++ ){
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e037      	b.n	8006118 <ModbusSlave_CreateCoilStatus+0x8c>
		if( !_coilStatusRegisters[k].isUsed ){
 80060a8:	4a24      	ldr	r2, [pc, #144]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4413      	add	r3, r2
 80060b0:	3305      	adds	r3, #5
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f083 0301 	eor.w	r3, r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d029      	beq.n	8006112 <ModbusSlave_CreateCoilStatus+0x86>
			_coilStatusRegisters[k].address = address;
 80060be:	4a1f      	ldr	r2, [pc, #124]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	801a      	strh	r2, [r3, #0]
			_coilStatusRegisters[k].value = (uint16_t)value;
 80060ca:	797b      	ldrb	r3, [r7, #5]
 80060cc:	b299      	uxth	r1, r3
 80060ce:	4a1b      	ldr	r2, [pc, #108]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	4413      	add	r3, r2
 80060d6:	3302      	adds	r3, #2
 80060d8:	460a      	mov	r2, r1
 80060da:	801a      	strh	r2, [r3, #0]
			_coilStatusRegisters[k].isUsed = true;
 80060dc:	4a17      	ldr	r2, [pc, #92]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4413      	add	r3, r2
 80060e4:	3305      	adds	r3, #5
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
			_coilStatusRegisters[k].onRead = NULL;
 80060ea:	4a14      	ldr	r2, [pc, #80]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	4413      	add	r3, r2
 80060f2:	3308      	adds	r3, #8
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
			_coilStatusRegisters[k].onWrite = NULL;
 80060f8:	4a10      	ldr	r2, [pc, #64]	; (800613c <ModbusSlave_CreateCoilStatus+0xb0>)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	4413      	add	r3, r2
 8006100:	330c      	adds	r3, #12
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
			result.type = COIL_STATUS;
 8006106:	2300      	movs	r3, #0
 8006108:	73bb      	strb	r3, [r7, #14]
			result.id = k;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	b21b      	sxth	r3, r3
 800610e:	81bb      	strh	r3, [r7, #12]
			break;
 8006110:	e005      	b.n	800611e <ModbusSlave_CreateCoilStatus+0x92>
	for( int k = 0; k < MODBUS_SLAVE_COIL_STATUS_SIZE; k++ ){
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3301      	adds	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	ddc4      	ble.n	80060a8 <ModbusSlave_CreateCoilStatus+0x1c>
		}
	}
	return result;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	2300      	movs	r3, #0
 8006124:	8a3a      	ldrh	r2, [r7, #16]
 8006126:	f362 030f 	bfi	r3, r2, #0, #16
 800612a:	8a7a      	ldrh	r2, [r7, #18]
 800612c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	200014b8 	.word	0x200014b8

08006140 <ModbusSlave_CreateHoldingRegister>:
		}
	}
	return result;
}

ModbusRegister_Handle_t ModbusSlave_CreateHoldingRegister( uint16_t address, uint16_t value ){
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	460a      	mov	r2, r1
 800614a:	80fb      	strh	r3, [r7, #6]
 800614c:	4613      	mov	r3, r2
 800614e:	80bb      	strh	r3, [r7, #4]
	ModbusRegister_Handle_t result;
	result.id = -1;
 8006150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006154:	81bb      	strh	r3, [r7, #12]
	for( int k = 0; k < MODBUS_SLAVE_HOLDING_REGISTER_SIZE; k++ ){
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e035      	b.n	80061c8 <ModbusSlave_CreateHoldingRegister+0x88>
		if( !_holdingRegisters[k].isUsed ){
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	4413      	add	r3, r2
 8006164:	3305      	adds	r3, #5
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d027      	beq.n	80061c2 <ModbusSlave_CreateHoldingRegister+0x82>
			_holdingRegisters[k].address = address;
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	4413      	add	r3, r2
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	801a      	strh	r2, [r3, #0]
			_holdingRegisters[k].value = value;
 800617e:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	4413      	add	r3, r2
 8006186:	3302      	adds	r3, #2
 8006188:	88ba      	ldrh	r2, [r7, #4]
 800618a:	801a      	strh	r2, [r3, #0]
			_holdingRegisters[k].isUsed = true;
 800618c:	4a17      	ldr	r2, [pc, #92]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	4413      	add	r3, r2
 8006194:	3305      	adds	r3, #5
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
			_holdingRegisters[k].onRead = NULL;
 800619a:	4a14      	ldr	r2, [pc, #80]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4413      	add	r3, r2
 80061a2:	3308      	adds	r3, #8
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
			_holdingRegisters[k].onWrite = NULL;
 80061a8:	4a10      	ldr	r2, [pc, #64]	; (80061ec <ModbusSlave_CreateHoldingRegister+0xac>)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4413      	add	r3, r2
 80061b0:	330c      	adds	r3, #12
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
			result.id = k;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	81bb      	strh	r3, [r7, #12]
			result.type = HOLDING_REGISTER;
 80061bc:	2302      	movs	r3, #2
 80061be:	73bb      	strb	r3, [r7, #14]
			break;
 80061c0:	e005      	b.n	80061ce <ModbusSlave_CreateHoldingRegister+0x8e>
	for( int k = 0; k < MODBUS_SLAVE_HOLDING_REGISTER_SIZE; k++ ){
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	3301      	adds	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	ddc6      	ble.n	800615c <ModbusSlave_CreateHoldingRegister+0x1c>
		}
	}
	return result;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	2300      	movs	r3, #0
 80061d4:	8a3a      	ldrh	r2, [r7, #16]
 80061d6:	f362 030f 	bfi	r3, r2, #0, #16
 80061da:	8a7a      	ldrh	r2, [r7, #18]
 80061dc:	f362 431f 	bfi	r3, r2, #16, #16
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	200013b8 	.word	0x200013b8

080061f0 <ModbusSlave_CreateInputRegister>:

ModbusRegister_Handle_t ModbusSlave_CreateInputRegister( uint16_t address, uint16_t value ){
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	460a      	mov	r2, r1
 80061fa:	80fb      	strh	r3, [r7, #6]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80bb      	strh	r3, [r7, #4]
	ModbusRegister_Handle_t result;
	result.id = -1;
 8006200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006204:	81bb      	strh	r3, [r7, #12]
	for( int k = 0; k < MODBUS_SLAVE_INPUT_REGISTER_SIZE; k++ ){
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e035      	b.n	8006278 <ModbusSlave_CreateInputRegister+0x88>
		if( !_inputRegisters[k].isUsed ){
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4413      	add	r3, r2
 8006214:	3305      	adds	r3, #5
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f083 0301 	eor.w	r3, r3, #1
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d027      	beq.n	8006272 <ModbusSlave_CreateInputRegister+0x82>
			_inputRegisters[k].address = address;
 8006222:	4a1e      	ldr	r2, [pc, #120]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4413      	add	r3, r2
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	801a      	strh	r2, [r3, #0]
			_inputRegisters[k].value = value;
 800622e:	4a1b      	ldr	r2, [pc, #108]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	4413      	add	r3, r2
 8006236:	3302      	adds	r3, #2
 8006238:	88ba      	ldrh	r2, [r7, #4]
 800623a:	801a      	strh	r2, [r3, #0]
			_inputRegisters[k].isUsed = true;
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	4413      	add	r3, r2
 8006244:	3305      	adds	r3, #5
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
			_inputRegisters[k].onRead = NULL;
 800624a:	4a14      	ldr	r2, [pc, #80]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	4413      	add	r3, r2
 8006252:	3308      	adds	r3, #8
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
			_inputRegisters[k].onWrite = NULL;
 8006258:	4a10      	ldr	r2, [pc, #64]	; (800629c <ModbusSlave_CreateInputRegister+0xac>)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	330c      	adds	r3, #12
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
			result.id = k;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	b21b      	sxth	r3, r3
 800626a:	81bb      	strh	r3, [r7, #12]
			result.type = INPUT_REGISTER;
 800626c:	2303      	movs	r3, #3
 800626e:	73bb      	strb	r3, [r7, #14]
			break;
 8006270:	e005      	b.n	800627e <ModbusSlave_CreateInputRegister+0x8e>
	for( int k = 0; k < MODBUS_SLAVE_INPUT_REGISTER_SIZE; k++ ){
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	3301      	adds	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	ddc6      	ble.n	800620c <ModbusSlave_CreateInputRegister+0x1c>
		}
	}
	return result;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	2300      	movs	r3, #0
 8006284:	8a3a      	ldrh	r2, [r7, #16]
 8006286:	f362 030f 	bfi	r3, r2, #0, #16
 800628a:	8a7a      	ldrh	r2, [r7, #18]
 800628c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	200012b8 	.word	0x200012b8

080062a0 <ModbusSlave_SetRegisterValue>:
		}
	}
	return result;
}

ModbusOpResult ModbusSlave_SetRegisterValue( const ModbusRegister_Handle_t* handle, uint16_t value ){
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
	ModbusOpResult result = MODBUS_OP_INVALID_REGISTER;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
	ModbusRegister *_register = ModbusSlave_GetRegister(handle);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f865 	bl	8006380 <ModbusSlave_GetRegister>
 80062b6:	60b8      	str	r0, [r7, #8]
	if( _register != NULL ){
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <ModbusSlave_SetRegisterValue+0x3a>
		result = MODBUS_OP_SUCCESS;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
		_register->value = value;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	805a      	strh	r2, [r3, #2]
		// fire on write callback
		if( _register->onWrite != NULL ){
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <ModbusSlave_SetRegisterValue+0x3a>
			_register->onWrite(value);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	887a      	ldrh	r2, [r7, #2]
 80062d6:	4610      	mov	r0, r2
 80062d8:	4798      	blx	r3
		}
	}
	return result;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <ModbusSlave_SetRegisterValueByAddress>:
		}
	}
	return result;
}

ModbusOpResult ModbusSlave_SetRegisterValueByAddress( ModbusRegisterType type, uint16_t address, uint16_t value ){
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
 80062ee:	460b      	mov	r3, r1
 80062f0:	80bb      	strh	r3, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	807b      	strh	r3, [r7, #2]
	ModbusOpResult result = MODBUS_OP_INVALID_REGISTER;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
	ModbusRegister *_register = ModbusSlave_GetRegisterByAddress(type, address);
 80062fa:	88ba      	ldrh	r2, [r7, #4]
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f8d1 	bl	80064a8 <ModbusSlave_GetRegisterByAddress>
 8006306:	60b8      	str	r0, [r7, #8]
	if( _register != NULL ){
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <ModbusSlave_SetRegisterValueByAddress+0x46>
		result = MODBUS_OP_SUCCESS;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
		_register->value = value;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	887a      	ldrh	r2, [r7, #2]
 8006316:	805a      	strh	r2, [r3, #2]
		// fire on read callback
		if( _register->onWrite != NULL ){
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <ModbusSlave_SetRegisterValueByAddress+0x46>
			_register->onWrite(value);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	887a      	ldrh	r2, [r7, #2]
 8006326:	4610      	mov	r0, r2
 8006328:	4798      	blx	r3
		}
	}
	return result;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <ModbusSlave_GetRegisterValueByAddress>:

ModbusOpResult ModbusSlave_GetRegisterValueByAddress( ModbusRegisterType type, uint16_t address, uint16_t* value ){
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	603a      	str	r2, [r7, #0]
 800633e:	71fb      	strb	r3, [r7, #7]
 8006340:	460b      	mov	r3, r1
 8006342:	80bb      	strh	r3, [r7, #4]
	ModbusOpResult result = MODBUS_OP_INVALID_REGISTER;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
	ModbusRegister *_register = ModbusSlave_GetRegisterByAddress(type, address);
 8006348:	88ba      	ldrh	r2, [r7, #4]
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f8aa 	bl	80064a8 <ModbusSlave_GetRegisterByAddress>
 8006354:	60b8      	str	r0, [r7, #8]
	if( _register != NULL ){
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <ModbusSlave_GetRegisterValueByAddress+0x42>
		result = MODBUS_OP_SUCCESS;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
		*value = _register->value;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	885a      	ldrh	r2, [r3, #2]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	801a      	strh	r2, [r3, #0]
		// fire on read callback
		if( _register->onRead != NULL ){
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <ModbusSlave_GetRegisterValueByAddress+0x42>
			_register->onRead();
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4798      	blx	r3
		}
	}
	return result;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <ModbusSlave_GetRegister>:

// Private functions

ModbusRegister* ModbusSlave_GetRegister( const ModbusRegister_Handle_t* handle ){
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	ModbusRegister* returnValue = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
	if( handle->type == COIL_STATUS ){
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d11b      	bne.n	80063cc <ModbusSlave_GetRegister+0x4c>
		if( handle->id >= 0 && handle->id < MODBUS_SLAVE_COIL_STATUS_SIZE ){
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800639a:	2b00      	cmp	r3, #0
 800639c:	db75      	blt.n	800648a <ModbusSlave_GetRegister+0x10a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	dc70      	bgt.n	800648a <ModbusSlave_GetRegister+0x10a>
			if( _coilStatusRegisters[handle->id].isUsed ){
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ae:	4a3a      	ldr	r2, [pc, #232]	; (8006498 <ModbusSlave_GetRegister+0x118>)
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	4413      	add	r3, r2
 80063b4:	3305      	adds	r3, #5
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d066      	beq.n	800648a <ModbusSlave_GetRegister+0x10a>
				returnValue = &(_coilStatusRegisters[handle->id]);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	4a34      	ldr	r2, [pc, #208]	; (8006498 <ModbusSlave_GetRegister+0x118>)
 80063c6:	4413      	add	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e05e      	b.n	800648a <ModbusSlave_GetRegister+0x10a>
			}
		}
	}
	else if( handle->type == INPUT_STATUS ){
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	789b      	ldrb	r3, [r3, #2]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d11b      	bne.n	800640c <ModbusSlave_GetRegister+0x8c>
		if( handle->id >= 0 && handle->id < MODBUS_SLAVE_INPUT_STATUS_SIZE ){
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db55      	blt.n	800648a <ModbusSlave_GetRegister+0x10a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	dc50      	bgt.n	800648a <ModbusSlave_GetRegister+0x10a>
			if( _inputStatusRegisters[handle->id].isUsed ){
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ee:	4a2b      	ldr	r2, [pc, #172]	; (800649c <ModbusSlave_GetRegister+0x11c>)
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	4413      	add	r3, r2
 80063f4:	3305      	adds	r3, #5
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d046      	beq.n	800648a <ModbusSlave_GetRegister+0x10a>
				returnValue = &(_inputStatusRegisters[handle->id]);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <ModbusSlave_GetRegister+0x11c>)
 8006406:	4413      	add	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e03e      	b.n	800648a <ModbusSlave_GetRegister+0x10a>
			}
		}
	}
	else if( handle->type == HOLDING_REGISTER ){
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	789b      	ldrb	r3, [r3, #2]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d11b      	bne.n	800644c <ModbusSlave_GetRegister+0xcc>
		if( handle->id >= 0 && handle->id < MODBUS_SLAVE_HOLDING_REGISTER_SIZE ){
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	db35      	blt.n	800648a <ModbusSlave_GetRegister+0x10a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	dc30      	bgt.n	800648a <ModbusSlave_GetRegister+0x10a>
			if( _holdingRegisters[handle->id].isUsed ){
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800642e:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <ModbusSlave_GetRegister+0x120>)
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4413      	add	r3, r2
 8006434:	3305      	adds	r3, #5
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d026      	beq.n	800648a <ModbusSlave_GetRegister+0x10a>
				returnValue = &(_holdingRegisters[handle->id]);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <ModbusSlave_GetRegister+0x120>)
 8006446:	4413      	add	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e01e      	b.n	800648a <ModbusSlave_GetRegister+0x10a>
			}
		}
	}
	else if( handle->type == INPUT_REGISTER ){
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	789b      	ldrb	r3, [r3, #2]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d11a      	bne.n	800648a <ModbusSlave_GetRegister+0x10a>
		if( handle->id >= 0 && handle->id < MODBUS_SLAVE_INPUT_REGISTER_SIZE ){
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800645a:	2b00      	cmp	r3, #0
 800645c:	db15      	blt.n	800648a <ModbusSlave_GetRegister+0x10a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	dc10      	bgt.n	800648a <ModbusSlave_GetRegister+0x10a>
			if( _inputRegisters[handle->id].isUsed ){
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	4a0d      	ldr	r2, [pc, #52]	; (80064a4 <ModbusSlave_GetRegister+0x124>)
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	4413      	add	r3, r2
 8006474:	3305      	adds	r3, #5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <ModbusSlave_GetRegister+0x10a>
				returnValue = &(_inputRegisters[handle->id]);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <ModbusSlave_GetRegister+0x124>)
 8006486:	4413      	add	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
			}
		}
	}
	return returnValue;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	200014b8 	.word	0x200014b8
 800649c:	200015b8 	.word	0x200015b8
 80064a0:	200013b8 	.word	0x200013b8
 80064a4:	200012b8 	.word	0x200012b8

080064a8 <ModbusSlave_GetRegisterByAddress>:

ModbusRegister* ModbusSlave_GetRegisterByAddress( ModbusRegisterType type, uint16_t address ){
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	460a      	mov	r2, r1
 80064b2:	71fb      	strb	r3, [r7, #7]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80bb      	strh	r3, [r7, #4]
	ModbusRegister* returnValue = NULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
	if( type == COIL_STATUS ){
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11f      	bne.n	8006502 <ModbusSlave_GetRegisterByAddress+0x5a>
		for( int k = 0; k < MODBUS_SLAVE_COIL_STATUS_SIZE; k++ ){
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e018      	b.n	80064fa <ModbusSlave_GetRegisterByAddress+0x52>
			if( _coilStatusRegisters[k].isUsed && address == _coilStatusRegisters[k].address ){
 80064c8:	4a45      	ldr	r2, [pc, #276]	; (80065e0 <ModbusSlave_GetRegisterByAddress+0x138>)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	4413      	add	r3, r2
 80064d0:	3305      	adds	r3, #5
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <ModbusSlave_GetRegisterByAddress+0x4c>
 80064d8:	4a41      	ldr	r2, [pc, #260]	; (80065e0 <ModbusSlave_GetRegisterByAddress+0x138>)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	88ba      	ldrh	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d105      	bne.n	80064f4 <ModbusSlave_GetRegisterByAddress+0x4c>
				returnValue = &(_coilStatusRegisters[k]);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <ModbusSlave_GetRegisterByAddress+0x138>)
 80064ee:	4413      	add	r3, r2
 80064f0:	61fb      	str	r3, [r7, #28]
				break;
 80064f2:	e06e      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
		for( int k = 0; k < MODBUS_SLAVE_COIL_STATUS_SIZE; k++ ){
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b0f      	cmp	r3, #15
 80064fe:	dde3      	ble.n	80064c8 <ModbusSlave_GetRegisterByAddress+0x20>
 8006500:	e067      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
			}
		}
	}
	else if( type == INPUT_STATUS ){
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d11f      	bne.n	8006548 <ModbusSlave_GetRegisterByAddress+0xa0>
		for( int k = 0; k < MODBUS_SLAVE_INPUT_STATUS_SIZE; k++ ){
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e018      	b.n	8006540 <ModbusSlave_GetRegisterByAddress+0x98>
			if( _inputStatusRegisters[k].isUsed && address == _inputStatusRegisters[k].address ){
 800650e:	4a35      	ldr	r2, [pc, #212]	; (80065e4 <ModbusSlave_GetRegisterByAddress+0x13c>)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	4413      	add	r3, r2
 8006516:	3305      	adds	r3, #5
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <ModbusSlave_GetRegisterByAddress+0x92>
 800651e:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <ModbusSlave_GetRegisterByAddress+0x13c>)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	88ba      	ldrh	r2, [r7, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d105      	bne.n	800653a <ModbusSlave_GetRegisterByAddress+0x92>
				returnValue = &(_inputStatusRegisters[k]);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <ModbusSlave_GetRegisterByAddress+0x13c>)
 8006534:	4413      	add	r3, r2
 8006536:	61fb      	str	r3, [r7, #28]
				break;
 8006538:	e04b      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
		for( int k = 0; k < MODBUS_SLAVE_INPUT_STATUS_SIZE; k++ ){
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	3301      	adds	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	dde3      	ble.n	800650e <ModbusSlave_GetRegisterByAddress+0x66>
 8006546:	e044      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
			}
		}
	}
	else if( type == HOLDING_REGISTER ){
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d11f      	bne.n	800658e <ModbusSlave_GetRegisterByAddress+0xe6>
		for( int k = 0; k < MODBUS_SLAVE_HOLDING_REGISTER_SIZE; k++ ){
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e018      	b.n	8006586 <ModbusSlave_GetRegisterByAddress+0xde>
			if( _holdingRegisters[k].isUsed && address == _holdingRegisters[k].address ){
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <ModbusSlave_GetRegisterByAddress+0x140>)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	4413      	add	r3, r2
 800655c:	3305      	adds	r3, #5
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00d      	beq.n	8006580 <ModbusSlave_GetRegisterByAddress+0xd8>
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <ModbusSlave_GetRegisterByAddress+0x140>)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	88ba      	ldrh	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d105      	bne.n	8006580 <ModbusSlave_GetRegisterByAddress+0xd8>
				returnValue = &(_holdingRegisters[k]);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <ModbusSlave_GetRegisterByAddress+0x140>)
 800657a:	4413      	add	r3, r2
 800657c:	61fb      	str	r3, [r7, #28]
				break;
 800657e:	e028      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
		for( int k = 0; k < MODBUS_SLAVE_HOLDING_REGISTER_SIZE; k++ ){
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3301      	adds	r3, #1
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	dde3      	ble.n	8006554 <ModbusSlave_GetRegisterByAddress+0xac>
 800658c:	e021      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
			}
		}
	}
	else if( type == INPUT_REGISTER ){
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d11e      	bne.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
		for( int k = 0; k < MODBUS_SLAVE_INPUT_REGISTER_SIZE; k++ ){
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e018      	b.n	80065cc <ModbusSlave_GetRegisterByAddress+0x124>
			if( _inputRegisters[k].isUsed && address == _inputRegisters[k].address ){
 800659a:	4a14      	ldr	r2, [pc, #80]	; (80065ec <ModbusSlave_GetRegisterByAddress+0x144>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	4413      	add	r3, r2
 80065a2:	3305      	adds	r3, #5
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <ModbusSlave_GetRegisterByAddress+0x11e>
 80065aa:	4a10      	ldr	r2, [pc, #64]	; (80065ec <ModbusSlave_GetRegisterByAddress+0x144>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	88ba      	ldrh	r2, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d105      	bne.n	80065c6 <ModbusSlave_GetRegisterByAddress+0x11e>
				returnValue = &(_inputRegisters[k]);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <ModbusSlave_GetRegisterByAddress+0x144>)
 80065c0:	4413      	add	r3, r2
 80065c2:	61fb      	str	r3, [r7, #28]
				break;
 80065c4:	e005      	b.n	80065d2 <ModbusSlave_GetRegisterByAddress+0x12a>
		for( int k = 0; k < MODBUS_SLAVE_INPUT_REGISTER_SIZE; k++ ){
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b0f      	cmp	r3, #15
 80065d0:	dde3      	ble.n	800659a <ModbusSlave_GetRegisterByAddress+0xf2>
			}
		}
	}
	return returnValue;
 80065d2:	69fb      	ldr	r3, [r7, #28]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3724      	adds	r7, #36	; 0x24
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	200014b8 	.word	0x200014b8
 80065e4:	200015b8 	.word	0x200015b8
 80065e8:	200013b8 	.word	0x200013b8
 80065ec:	200012b8 	.word	0x200012b8

080065f0 <ModbusCore_Process>:
void ModbusCore_ReadHoldingRegisters( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu );
void ModbusCore_ReadInputRegisters( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu );
void ModbusCore_WriteSingleCoil( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu );
void ModbusCore_WriteSingleHoldingRegister( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu );

void ModbusCore_Process( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	ModbusMsgTypes rxMsgType = (ModbusMsgTypes)inputPdu->buffer[0];
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	73fb      	strb	r3, [r7, #15]
	switch(rxMsgType){
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	3b01      	subs	r3, #1
 8006604:	2b0f      	cmp	r3, #15
 8006606:	d84d      	bhi.n	80066a4 <ModbusCore_Process+0xb4>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <ModbusCore_Process+0x20>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006651 	.word	0x08006651
 8006614:	0800665b 	.word	0x0800665b
 8006618:	08006665 	.word	0x08006665
 800661c:	0800666f 	.word	0x0800666f
 8006620:	08006679 	.word	0x08006679
 8006624:	0800668f 	.word	0x0800668f
 8006628:	080066a5 	.word	0x080066a5
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066a5 	.word	0x080066a5
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066a5 	.word	0x080066a5
 800663c:	080066a5 	.word	0x080066a5
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080066a5 	.word	0x080066a5
 8006648:	08006683 	.word	0x08006683
 800664c:	08006699 	.word	0x08006699
		case READ_COIL_STATUS:
			ModbusCore_ReadCoilStatus( inputPdu, outputPdu );
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f85b 	bl	800670e <ModbusCore_ReadCoilStatus>
			break;
 8006658:	e02a      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case READ_INPUT_STATUS:
			ModbusCore_ReadInputStatus( inputPdu, outputPdu );
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f910 	bl	8006882 <ModbusCore_ReadInputStatus>
			break;
 8006662:	e025      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case READ_HOLDING_REGISTERS:
			ModbusCore_ReadHoldingRegisters( inputPdu, outputPdu );
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9c5 	bl	80069f6 <ModbusCore_ReadHoldingRegisters>
			break;
 800666c:	e020      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case READ_INPUT_REGISTERS:
			ModbusCore_ReadInputRegisters( inputPdu, outputPdu );
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa5e 	bl	8006b32 <ModbusCore_ReadInputRegisters>
			break;
 8006676:	e01b      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case FORCE_SINGLE_COIL:
			ModbusCore_WriteSingleCoil( inputPdu, outputPdu );
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 faf7 	bl	8006c6e <ModbusCore_WriteSingleCoil>
			break;
 8006680:	e016      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case FORCE_MULTIPLE_COILS:
			ModbusCore_InvalidOperation( rxMsgType, outputPdu );
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f816 	bl	80066b8 <ModbusCore_InvalidOperation>
			break;
 800668c:	e010      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case PRESET_SINGLE_REGISTER:
			ModbusCore_WriteSingleHoldingRegister( inputPdu, outputPdu );
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb74 	bl	8006d7e <ModbusCore_WriteSingleHoldingRegister>
			break;
 8006696:	e00b      	b.n	80066b0 <ModbusCore_Process+0xc0>
		case PRESET_MULTIPLE_REGISTERS:
			ModbusCore_InvalidOperation( rxMsgType, outputPdu );
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f80b 	bl	80066b8 <ModbusCore_InvalidOperation>
			break;
 80066a2:	e005      	b.n	80066b0 <ModbusCore_Process+0xc0>
		default:
			ModbusCore_InvalidOperation( rxMsgType, outputPdu );
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f805 	bl	80066b8 <ModbusCore_InvalidOperation>
			break;
 80066ae:	bf00      	nop
	}
}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <ModbusCore_InvalidOperation>:

void ModbusCore_InvalidOperation(  ModbusMsgTypes type, ModbusBuffer* outputPdu ){
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
	outputPdu->index = 0;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputPdu->buffer[outputPdu->index++] = ( type | 0x80 );
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	b291      	uxth	r1, r2
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80066dc:	461a      	mov	r2, r3
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066e4:	b2d9      	uxtb	r1, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	5499      	strb	r1, [r3, r2]
	outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_FUNCTION;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	b291      	uxth	r1, r2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80066fa:	461a      	mov	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2101      	movs	r1, #1
 8006700:	5499      	strb	r1, [r3, r2]
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <ModbusCore_ReadCoilStatus>:

void ModbusCore_ReadCoilStatus( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	uint16_t startRegAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	b21a      	sxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	b21b      	sxth	r3, r3
 8006726:	4313      	orrs	r3, r2
 8006728:	b21b      	sxth	r3, r3
 800672a:	81fb      	strh	r3, [r7, #14]
	uint16_t totalRequestedRegCount = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	b21a      	sxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	791b      	ldrb	r3, [r3, #4]
 8006738:	b21b      	sxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b21b      	sxth	r3, r3
 800673e:	81bb      	strh	r3, [r7, #12]
	outputPdu->index = 0;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputPdu->buffer[outputPdu->index++] = inputPdu->buffer[0];
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	b291      	uxth	r1, r2
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7819      	ldrb	r1, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	5499      	strb	r1, [r3, r2]
	outputPdu->buffer[outputPdu->index++] = totalRequestedRegCount / 8;
 8006762:	89bb      	ldrh	r3, [r7, #12]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	b299      	uxth	r1, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	b290      	uxth	r0, r2
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 8006778:	461a      	mov	r2, r3
 800677a:	b2c9      	uxtb	r1, r1
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	5499      	strb	r1, [r3, r2]
	uint8_t success = true;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
	if( totalRequestedRegCount % 8 > 0 ){
 8006784:	89bb      	ldrh	r3, [r7, #12]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <ModbusCore_ReadCoilStatus+0x8e>
		outputPdu->buffer[1] += 1;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	3301      	adds	r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	705a      	strb	r2, [r3, #1]
	}

	for( int k = 0; k < totalRequestedRegCount; k++ ){
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e03b      	b.n	800681a <ModbusCore_ReadCoilStatus+0x10c>
		uint16_t _value = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	813b      	strh	r3, [r7, #8]
		ModbusOpResult _result = ModbusSlave_GetRegisterValueByAddress( COIL_STATUS, startRegAddress+k, &_value );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	89fb      	ldrh	r3, [r7, #14]
 80067ac:	4413      	add	r3, r2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f107 0208 	add.w	r2, r7, #8
 80067b4:	4619      	mov	r1, r3
 80067b6:	2000      	movs	r0, #0
 80067b8:	f7ff fdbc 	bl	8006334 <ModbusSlave_GetRegisterValueByAddress>
 80067bc:	4603      	mov	r3, r0
 80067be:	72fb      	strb	r3, [r7, #11]
		if( _result == MODBUS_OP_SUCCESS ){
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d124      	bne.n	8006810 <ModbusCore_ReadCoilStatus+0x102>
			outputPdu->buffer[outputPdu->index + ( k / 8 )] |= ( _value << ( k % 8 ) );
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80067cc:	4619      	mov	r1, r3
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da00      	bge.n	80067d6 <ModbusCore_ReadCoilStatus+0xc8>
 80067d4:	3307      	adds	r3, #7
 80067d6:	10db      	asrs	r3, r3, #3
 80067d8:	461a      	mov	r2, r3
 80067da:	1853      	adds	r3, r2, r1
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	b259      	sxtb	r1, r3
 80067e2:	893b      	ldrh	r3, [r7, #8]
 80067e4:	461c      	mov	r4, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4258      	negs	r0, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	f000 0007 	and.w	r0, r0, #7
 80067f2:	bf58      	it	pl
 80067f4:	4243      	negpl	r3, r0
 80067f6:	fa04 f303 	lsl.w	r3, r4, r3
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	430b      	orrs	r3, r1
 80067fe:	b259      	sxtb	r1, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006806:	4413      	add	r3, r2
 8006808:	b2c9      	uxtb	r1, r1
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	54d1      	strb	r1, [r2, r3]
 800680e:	e001      	b.n	8006814 <ModbusCore_ReadCoilStatus+0x106>
		}else{
			// illegal data address
			success = false;
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]
	for( int k = 0; k < totalRequestedRegCount; k++ ){
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3301      	adds	r3, #1
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	89bb      	ldrh	r3, [r7, #12]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	dbbf      	blt.n	80067a2 <ModbusCore_ReadCoilStatus+0x94>
		}
	}
	// calculate length at the end
	outputPdu->index = outputPdu->buffer[1] + 2;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	b29b      	uxth	r3, r3
 8006828:	3302      	adds	r3, #2
 800682a:	b29a      	uxth	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	if( !success ){
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d120      	bne.n	800687a <ModbusCore_ReadCoilStatus+0x16c>
		outputPdu->index = 0;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	b291      	uxth	r1, r2
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006850:	4619      	mov	r1, r3
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	5c52      	ldrb	r2, [r2, r1]
 8006856:	4619      	mov	r1, r3
 8006858:	f062 037f 	orn	r3, r2, #127	; 0x7f
 800685c:	b2da      	uxtb	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	b291      	uxth	r1, r2
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006872:	461a      	mov	r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2102      	movs	r1, #2
 8006878:	5499      	strb	r1, [r3, r2]
	}
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}

08006882 <ModbusCore_ReadInputStatus>:

void ModbusCore_ReadInputStatus( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 8006882:	b590      	push	{r4, r7, lr}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	uint16_t startRegAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	b21a      	sxth	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	789b      	ldrb	r3, [r3, #2]
 8006898:	b21b      	sxth	r3, r3
 800689a:	4313      	orrs	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	81fb      	strh	r3, [r7, #14]
	uint16_t totalRequestedRegCount = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	78db      	ldrb	r3, [r3, #3]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	b21a      	sxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	791b      	ldrb	r3, [r3, #4]
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	4313      	orrs	r3, r2
 80068b0:	b21b      	sxth	r3, r3
 80068b2:	81bb      	strh	r3, [r7, #12]
	outputPdu->index = 0;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputPdu->buffer[outputPdu->index++] = inputPdu->buffer[0];
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	b291      	uxth	r1, r2
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	7819      	ldrb	r1, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	5499      	strb	r1, [r3, r2]
	outputPdu->buffer[outputPdu->index++] = totalRequestedRegCount / 8;
 80068d6:	89bb      	ldrh	r3, [r7, #12]
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	b299      	uxth	r1, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	b290      	uxth	r0, r2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 80068ec:	461a      	mov	r2, r3
 80068ee:	b2c9      	uxtb	r1, r1
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	5499      	strb	r1, [r3, r2]
	uint8_t success = true;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
	if( totalRequestedRegCount % 8 > 0 ){
 80068f8:	89bb      	ldrh	r3, [r7, #12]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <ModbusCore_ReadInputStatus+0x8e>
		outputPdu->buffer[1] += 1;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	3301      	adds	r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	705a      	strb	r2, [r3, #1]
	}

	for( int k = 0; k < totalRequestedRegCount; k++ ){
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	e03b      	b.n	800698e <ModbusCore_ReadInputStatus+0x10c>
		uint16_t _value = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	813b      	strh	r3, [r7, #8]
		ModbusOpResult _result = ModbusSlave_GetRegisterValueByAddress( INPUT_STATUS, startRegAddress+k, &_value );
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	b29a      	uxth	r2, r3
 800691e:	89fb      	ldrh	r3, [r7, #14]
 8006920:	4413      	add	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	f107 0208 	add.w	r2, r7, #8
 8006928:	4619      	mov	r1, r3
 800692a:	2001      	movs	r0, #1
 800692c:	f7ff fd02 	bl	8006334 <ModbusSlave_GetRegisterValueByAddress>
 8006930:	4603      	mov	r3, r0
 8006932:	72fb      	strb	r3, [r7, #11]
		if( _result == MODBUS_OP_SUCCESS ){
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d124      	bne.n	8006984 <ModbusCore_ReadInputStatus+0x102>
			outputPdu->buffer[outputPdu->index + ( k / 8 )] |= ( _value << ( k % 8 ) );
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006940:	4619      	mov	r1, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da00      	bge.n	800694a <ModbusCore_ReadInputStatus+0xc8>
 8006948:	3307      	adds	r3, #7
 800694a:	10db      	asrs	r3, r3, #3
 800694c:	461a      	mov	r2, r3
 800694e:	1853      	adds	r3, r2, r1
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	5ccb      	ldrb	r3, [r1, r3]
 8006954:	b259      	sxtb	r1, r3
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	461c      	mov	r4, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4258      	negs	r0, r3
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	f000 0007 	and.w	r0, r0, #7
 8006966:	bf58      	it	pl
 8006968:	4243      	negpl	r3, r0
 800696a:	fa04 f303 	lsl.w	r3, r4, r3
 800696e:	b25b      	sxtb	r3, r3
 8006970:	430b      	orrs	r3, r1
 8006972:	b259      	sxtb	r1, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800697a:	4413      	add	r3, r2
 800697c:	b2c9      	uxtb	r1, r1
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	54d1      	strb	r1, [r2, r3]
 8006982:	e001      	b.n	8006988 <ModbusCore_ReadInputStatus+0x106>
		}else{
			// illegal data address
			success = false;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
	for( int k = 0; k < totalRequestedRegCount; k++ ){
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3301      	adds	r3, #1
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	89bb      	ldrh	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	429a      	cmp	r2, r3
 8006994:	dbbf      	blt.n	8006916 <ModbusCore_ReadInputStatus+0x94>
		}
	}
	// calculate length at the end
	outputPdu->index = outputPdu->buffer[1] + 2;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	b29b      	uxth	r3, r3
 800699c:	3302      	adds	r3, #2
 800699e:	b29a      	uxth	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	if( !success ){
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d120      	bne.n	80069ee <ModbusCore_ReadInputStatus+0x16c>
		outputPdu->index = 0;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	b291      	uxth	r1, r2
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80069c4:	4619      	mov	r1, r3
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	5c52      	ldrb	r2, [r2, r1]
 80069ca:	4619      	mov	r1, r3
 80069cc:	f062 037f 	orn	r3, r2, #127	; 0x7f
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	b291      	uxth	r1, r2
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80069e6:	461a      	mov	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2102      	movs	r1, #2
 80069ec:	5499      	strb	r1, [r3, r2]
	}
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}

080069f6 <ModbusCore_ReadHoldingRegisters>:

void ModbusCore_ReadHoldingRegisters( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
	uint16_t startRegAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	b21a      	sxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	789b      	ldrb	r3, [r3, #2]
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	81fb      	strh	r3, [r7, #14]
	uint16_t totalRequestedRegCount = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	78db      	ldrb	r3, [r3, #3]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	b21a      	sxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	791b      	ldrb	r3, [r3, #4]
 8006a20:	b21b      	sxth	r3, r3
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b21b      	sxth	r3, r3
 8006a26:	81bb      	strh	r3, [r7, #12]
	outputPdu->index = 0;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputPdu->buffer[outputPdu->index++] = inputPdu->buffer[0];
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	b291      	uxth	r1, r2
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006a40:	461a      	mov	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7819      	ldrb	r1, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	5499      	strb	r1, [r3, r2]
	outputPdu->buffer[outputPdu->index++] = totalRequestedRegCount * 2;
 8006a4a:	89bb      	ldrh	r3, [r7, #12]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	b288      	uxth	r0, r1
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	f8a1 0080 	strh.w	r0, [r1, #128]	; 0x80
 8006a5e:	4619      	mov	r1, r3
 8006a60:	0053      	lsls	r3, r2, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	545a      	strb	r2, [r3, r1]
	uint8_t success = true;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
	for(int k = 0; k < totalRequestedRegCount; k++ ){
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	e033      	b.n	8006ada <ModbusCore_ReadHoldingRegisters+0xe4>
		uint16_t _value = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	813b      	strh	r3, [r7, #8]
		ModbusOpResult _result = ModbusSlave_GetRegisterValueByAddress( HOLDING_REGISTER, startRegAddress+k, &_value );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	4619      	mov	r1, r3
 8006a86:	2002      	movs	r0, #2
 8006a88:	f7ff fc54 	bl	8006334 <ModbusSlave_GetRegisterValueByAddress>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	72fb      	strb	r3, [r7, #11]
		if( _result == MODBUS_OP_SUCCESS ){
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d11c      	bne.n	8006ad0 <ModbusCore_ReadHoldingRegisters+0xda>
			outputPdu->buffer[outputPdu->index++] = _value >> 8;
 8006a96:	893b      	ldrh	r3, [r7, #8]
 8006a98:	0a1b      	lsrs	r3, r3, #8
 8006a9a:	b299      	uxth	r1, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	b290      	uxth	r0, r2
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 8006aac:	461a      	mov	r2, r3
 8006aae:	b2c9      	uxtb	r1, r1
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	5499      	strb	r1, [r3, r2]
			outputPdu->buffer[outputPdu->index++] = _value & 0xFF;
 8006ab4:	8939      	ldrh	r1, [r7, #8]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	b290      	uxth	r0, r2
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	b2c9      	uxtb	r1, r1
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	5499      	strb	r1, [r3, r2]
 8006ace:	e001      	b.n	8006ad4 <ModbusCore_ReadHoldingRegisters+0xde>
		}else{
			success = false;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75fb      	strb	r3, [r7, #23]
	for(int k = 0; k < totalRequestedRegCount; k++ ){
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	89bb      	ldrh	r3, [r7, #12]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	dbc7      	blt.n	8006a72 <ModbusCore_ReadHoldingRegisters+0x7c>
		}
	}
	if( !success ){
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d120      	bne.n	8006b2a <ModbusCore_ReadHoldingRegisters+0x134>
		outputPdu->index = 0;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	b291      	uxth	r1, r2
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006b00:	4619      	mov	r1, r3
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	5c52      	ldrb	r2, [r2, r1]
 8006b06:	4619      	mov	r1, r3
 8006b08:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	b291      	uxth	r1, r2
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006b22:	461a      	mov	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2102      	movs	r1, #2
 8006b28:	5499      	strb	r1, [r3, r2]
	}
}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <ModbusCore_ReadInputRegisters>:

void ModbusCore_ReadInputRegisters( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
	uint16_t startRegAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	b21a      	sxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	81fb      	strh	r3, [r7, #14]
	uint16_t totalRequestedRegCount = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	78db      	ldrb	r3, [r3, #3]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	b21a      	sxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	81bb      	strh	r3, [r7, #12]
	outputPdu->index = 0;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputPdu->buffer[outputPdu->index++] = inputPdu->buffer[0];
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	b291      	uxth	r1, r2
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	5499      	strb	r1, [r3, r2]
	outputPdu->buffer[outputPdu->index++] = totalRequestedRegCount * 2;
 8006b86:	89bb      	ldrh	r3, [r7, #12]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006b90:	1c59      	adds	r1, r3, #1
 8006b92:	b288      	uxth	r0, r1
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	f8a1 0080 	strh.w	r0, [r1, #128]	; 0x80
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	0053      	lsls	r3, r2, #1
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	545a      	strb	r2, [r3, r1]
	uint8_t success = true;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
	for(int k = 0; k < totalRequestedRegCount; k++ ){
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e033      	b.n	8006c16 <ModbusCore_ReadInputRegisters+0xe4>
		uint16_t _value = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	813b      	strh	r3, [r7, #8]
		ModbusOpResult _result = ModbusSlave_GetRegisterValueByAddress( INPUT_REGISTER, startRegAddress+k, &_value );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	89fb      	ldrh	r3, [r7, #14]
 8006bb8:	4413      	add	r3, r2
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f107 0208 	add.w	r2, r7, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	2003      	movs	r0, #3
 8006bc4:	f7ff fbb6 	bl	8006334 <ModbusSlave_GetRegisterValueByAddress>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	72fb      	strb	r3, [r7, #11]
		if( _result == MODBUS_OP_SUCCESS ){
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11c      	bne.n	8006c0c <ModbusCore_ReadInputRegisters+0xda>
			outputPdu->buffer[outputPdu->index++] = _value >> 8;
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	b299      	uxth	r1, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	b290      	uxth	r0, r2
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 8006be8:	461a      	mov	r2, r3
 8006bea:	b2c9      	uxtb	r1, r1
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	5499      	strb	r1, [r3, r2]
			outputPdu->buffer[outputPdu->index++] = _value & 0xFF;
 8006bf0:	8939      	ldrh	r1, [r7, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	b290      	uxth	r0, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	f8a2 0080 	strh.w	r0, [r2, #128]	; 0x80
 8006c02:	461a      	mov	r2, r3
 8006c04:	b2c9      	uxtb	r1, r1
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	5499      	strb	r1, [r3, r2]
 8006c0a:	e001      	b.n	8006c10 <ModbusCore_ReadInputRegisters+0xde>
		}else{
			success = false;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	75fb      	strb	r3, [r7, #23]
	for(int k = 0; k < totalRequestedRegCount; k++ ){
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	3301      	adds	r3, #1
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	89bb      	ldrh	r3, [r7, #12]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	dbc7      	blt.n	8006bae <ModbusCore_ReadInputRegisters+0x7c>
		}
	}
	//
	if( !success ){
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d120      	bne.n	8006c66 <ModbusCore_ReadInputRegisters+0x134>
		outputPdu->index = 0;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	b291      	uxth	r1, r2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	5c52      	ldrb	r2, [r2, r1]
 8006c42:	4619      	mov	r1, r3
 8006c44:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	b291      	uxth	r1, r2
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006c5e:	461a      	mov	r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2102      	movs	r1, #2
 8006c64:	5499      	strb	r1, [r3, r2]
	}
}
 8006c66:	bf00      	nop
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <ModbusCore_WriteSingleCoil>:

void ModbusCore_WriteSingleCoil( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
	uint16_t coilAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	b21a      	sxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	789b      	ldrb	r3, [r3, #2]
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b21b      	sxth	r3, r3
 8006c8a:	81bb      	strh	r3, [r7, #12]
	uint16_t statusToWrite = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	b21a      	sxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	817b      	strh	r3, [r7, #10]
	uint16_t writeValue = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	81fb      	strh	r3, [r7, #14]

	if( statusToWrite == 0xFF00 ){
 8006ca4:	897b      	ldrh	r3, [r7, #10]
 8006ca6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8006caa:	d102      	bne.n	8006cb2 <ModbusCore_WriteSingleCoil+0x44>
		writeValue = 1;
 8006cac:	2301      	movs	r3, #1
 8006cae:	81fb      	strh	r3, [r7, #14]
 8006cb0:	e027      	b.n	8006d02 <ModbusCore_WriteSingleCoil+0x94>
	}else if( statusToWrite == 0x0000 ){
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <ModbusCore_WriteSingleCoil+0x50>
		writeValue = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	81fb      	strh	r3, [r7, #14]
 8006cbc:	e021      	b.n	8006d02 <ModbusCore_WriteSingleCoil+0x94>
	}else
	{
		outputPdu->index = 0;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	b291      	uxth	r1, r2
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	5c52      	ldrb	r2, [r2, r1]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	b291      	uxth	r1, r2
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	5499      	strb	r1, [r3, r2]
		return;
 8006d00:	e03a      	b.n	8006d78 <ModbusCore_WriteSingleCoil+0x10a>
	}
	ModbusOpResult _result = ModbusSlave_SetRegisterValueByAddress( COIL_STATUS, coilAddress, writeValue );
 8006d02:	89fa      	ldrh	r2, [r7, #14]
 8006d04:	89bb      	ldrh	r3, [r7, #12]
 8006d06:	4619      	mov	r1, r3
 8006d08:	2000      	movs	r0, #0
 8006d0a:	f7ff faeb 	bl	80062e4 <ModbusSlave_SetRegisterValueByAddress>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	727b      	strb	r3, [r7, #9]
	if( _result == MODBUS_OP_SUCCESS ){
 8006d12:	7a7b      	ldrb	r3, [r7, #9]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10e      	bne.n	8006d36 <ModbusCore_WriteSingleCoil+0xc8>
		memcpy(outputPdu->buffer,inputPdu->buffer,inputPdu->index);
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 fb34 	bl	8007390 <memcpy>
		outputPdu->index = inputPdu->index;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8006d34:	e020      	b.n	8006d78 <ModbusCore_WriteSingleCoil+0x10a>
	}else{
		outputPdu->index = 0;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	b291      	uxth	r1, r2
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006d4e:	4619      	mov	r1, r3
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	5c52      	ldrb	r2, [r2, r1]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	b291      	uxth	r1, r2
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006d70:	461a      	mov	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2102      	movs	r1, #2
 8006d76:	5499      	strb	r1, [r3, r2]
	}
}
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <ModbusCore_WriteSingleHoldingRegister>:

void ModbusCore_WriteSingleHoldingRegister( const ModbusBuffer* inputPdu, ModbusBuffer* outputPdu ){
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
	uint16_t coilAddress = ( inputPdu->buffer[1] << 8 ) | inputPdu->buffer[2];
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	b21a      	sxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b21b      	sxth	r3, r3
 8006d9a:	81fb      	strh	r3, [r7, #14]
	uint16_t valueToWrite = ( inputPdu->buffer[3] << 8 ) | inputPdu->buffer[4];
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	78db      	ldrb	r3, [r3, #3]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	b21a      	sxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	791b      	ldrb	r3, [r3, #4]
 8006da8:	b21b      	sxth	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	81bb      	strh	r3, [r7, #12]

	ModbusOpResult _result = ModbusSlave_SetRegisterValueByAddress( HOLDING_REGISTER, coilAddress, valueToWrite );
 8006db0:	89ba      	ldrh	r2, [r7, #12]
 8006db2:	89fb      	ldrh	r3, [r7, #14]
 8006db4:	4619      	mov	r1, r3
 8006db6:	2002      	movs	r0, #2
 8006db8:	f7ff fa94 	bl	80062e4 <ModbusSlave_SetRegisterValueByAddress>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	72fb      	strb	r3, [r7, #11]
	if( _result == MODBUS_OP_SUCCESS ){
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10e      	bne.n	8006de4 <ModbusCore_WriteSingleHoldingRegister+0x66>
		memcpy(outputPdu->buffer,inputPdu->buffer,inputPdu->index);
 8006dc6:	6838      	ldr	r0, [r7, #0]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f000 fadd 	bl	8007390 <memcpy>
		outputPdu->index = inputPdu->index;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}else{
		outputPdu->index = 0;
		outputPdu->buffer[outputPdu->index++] |= 0x80;
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
	}
}
 8006de2:	e020      	b.n	8006e26 <ModbusCore_WriteSingleHoldingRegister+0xa8>
		outputPdu->index = 0;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		outputPdu->buffer[outputPdu->index++] |= 0x80;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	b291      	uxth	r1, r2
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	5c52      	ldrb	r2, [r2, r1]
 8006e02:	4619      	mov	r1, r3
 8006e04:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	545a      	strb	r2, [r3, r1]
		outputPdu->buffer[outputPdu->index++] = MODBUS_ILLEGAL_DATA_ADDRESS;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	b291      	uxth	r1, r2
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006e1e:	461a      	mov	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2102      	movs	r1, #2
 8006e24:	5499      	strb	r1, [r3, r2]
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <ModbusCore_ClearPdu>:


void ModbusCore_ClearPdu( ModbusBuffer* inputPdu ){
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
	memset(inputPdu->buffer,0,MODBUS_RTU_RX_BUFFER_SIZE );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fab5 	bl	80073ac <memset>
	inputPdu->index = 0;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <ModbusRtu_CheckCRC>:
	0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
};

bool ModbusRtu_CheckCRC( const ModbusRtuMessage_t* rtuMsgStruct ){
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
	uint16_t calculatedCrc = ModbusRtu_CalculateCRC(rtuMsgStruct);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f862 	bl	8006f24 <ModbusRtu_CalculateCRC>
 8006e60:	4603      	mov	r3, r0
 8006e62:	81fb      	strh	r3, [r7, #14]
	return calculatedCrc == rtuMsgStruct->crc;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8006e6a:	89fa      	ldrh	r2, [r7, #14]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <ModbusRtu_CreateCRC>:


void ModbusRtu_CreateCRC(  ModbusRtuMessage_t* rtuMsgStruct  ){
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
	rtuMsgStruct->crc= ModbusRtu_CalculateCRC( rtuMsgStruct );
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f84c 	bl	8006f24 <ModbusRtu_CalculateCRC>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <ModbusRtu_ConstructStruct>:

void ModbusRtu_ConstructStruct( const ModbusBuffer* inputBuffer, ModbusRtuMessage_t* outputStr ){
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
	uint16_t inputBufLen = inputBuffer->index;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006eae:	817b      	strh	r3, [r7, #10]
	outputStr->pdu.index = 0;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	outputStr->id = inputBuffer->buffer[0];
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	701a      	strb	r2, [r3, #0]
	for( int k = 1; k < inputBufLen-2; k++ ){
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e012      	b.n	8006eec <ModbusRtu_ConstructStruct+0x4e>
		outputStr->pdu.buffer[outputStr->pdu.index++] = inputBuffer->buffer[k];
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	b291      	uxth	r1, r2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	440b      	add	r3, r1
 8006ee4:	709a      	strb	r2, [r3, #2]
	for( int k = 1; k < inputBufLen-2; k++ ){
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	897b      	ldrh	r3, [r7, #10]
 8006eee:	3b02      	subs	r3, #2
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	dbe7      	blt.n	8006ec6 <ModbusRtu_ConstructStruct+0x28>
	}
	outputStr->crc = ( inputBuffer->buffer[inputBufLen-2] << 8 ) | ( inputBuffer->buffer[inputBufLen-1] );
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	3b02      	subs	r3, #2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	5cd3      	ldrb	r3, [r2, r3]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b21a      	sxth	r2, r3
 8006f02:	897b      	ldrh	r3, [r7, #10]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	5ccb      	ldrb	r3, [r1, r3]
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <ModbusRtu_CalculateCRC>:

}

// private function

uint16_t ModbusRtu_CalculateCRC( const ModbusRtuMessage_t* rtuMsgStruct ){
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	uint8_t CRCHi = 0xFF, CRCLo = 0x0FF, Index;
 8006f2c:	23ff      	movs	r3, #255	; 0xff
 8006f2e:	73fb      	strb	r3, [r7, #15]
 8006f30:	23ff      	movs	r3, #255	; 0xff
 8006f32:	73bb      	strb	r3, [r7, #14]
	uint16_t pduLen = rtuMsgStruct->pdu.index;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006f3a:	81bb      	strh	r3, [r7, #12]
	uint16_t pduFrameIndex = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	817b      	strh	r3, [r7, #10]
	Index = CRCHi ^ rtuMsgStruct->id;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	4053      	eors	r3, r2
 8006f48:	727b      	strb	r3, [r7, #9]
	CRCHi = CRCLo ^ _auchCRCHi[Index];
 8006f4a:	7a7b      	ldrb	r3, [r7, #9]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <ModbusRtu_CalculateCRC+0x8c>)
 8006f4e:	5cd2      	ldrb	r2, [r2, r3]
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	4053      	eors	r3, r2
 8006f54:	73fb      	strb	r3, [r7, #15]
	CRCLo = _auchCRCLo[Index];
 8006f56:	7a7b      	ldrb	r3, [r7, #9]
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <ModbusRtu_CalculateCRC+0x90>)
 8006f5a:	5cd3      	ldrb	r3, [r2, r3]
 8006f5c:	73bb      	strb	r3, [r7, #14]

	while (pduLen--) {
 8006f5e:	e013      	b.n	8006f88 <ModbusRtu_CalculateCRC+0x64>
		Index = CRCHi ^ (rtuMsgStruct->pdu.buffer[pduFrameIndex++]);
 8006f60:	897b      	ldrh	r3, [r7, #10]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	817a      	strh	r2, [r7, #10]
 8006f66:	461a      	mov	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	789a      	ldrb	r2, [r3, #2]
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	4053      	eors	r3, r2
 8006f72:	727b      	strb	r3, [r7, #9]
		CRCHi = CRCLo ^ _auchCRCHi[Index];
 8006f74:	7a7b      	ldrb	r3, [r7, #9]
 8006f76:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <ModbusRtu_CalculateCRC+0x8c>)
 8006f78:	5cd2      	ldrb	r2, [r2, r3]
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	4053      	eors	r3, r2
 8006f7e:	73fb      	strb	r3, [r7, #15]
		CRCLo = _auchCRCLo[Index];
 8006f80:	7a7b      	ldrb	r3, [r7, #9]
 8006f82:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <ModbusRtu_CalculateCRC+0x90>)
 8006f84:	5cd3      	ldrb	r3, [r2, r3]
 8006f86:	73bb      	strb	r3, [r7, #14]
	while (pduLen--) {
 8006f88:	89bb      	ldrh	r3, [r7, #12]
 8006f8a:	1e5a      	subs	r2, r3, #1
 8006f8c:	81ba      	strh	r2, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <ModbusRtu_CalculateCRC+0x3c>
	}

	return (CRCHi << 8) | CRCLo;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	b29b      	uxth	r3, r3
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000038 	.word	0x20000038
 8006fb4:	20000138 	.word	0x20000138

08006fb8 <ModbusRtu_Slave_Init>:
void 	ModbusRtu_Slave_ReceiveTask(void *argument);
void 	ModbusRtu_Slave_Receive( uint8_t rxByte );
void 	ModbusRtu_Slave_Transmit( const ModbusRtuMessage_t* outputMsgStr );
int 	ModbusRtu_Slave_CalculateRxBufferSize( const ModbusBuffer *buffer );

int ModbusRtu_Slave_Init( const ModbusRtu_Config_t* config_t  ){
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	6078      	str	r0, [r7, #4]
	_config.id = config_t->id;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	4b18      	ldr	r3, [pc, #96]	; (8007028 <ModbusRtu_Slave_Init+0x70>)
 8006fc6:	701a      	strb	r2, [r3, #0]
	_config.send = config_t->send;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4a16      	ldr	r2, [pc, #88]	; (8007028 <ModbusRtu_Slave_Init+0x70>)
 8006fce:	6093      	str	r3, [r2, #8]
	_config.requestRead = config_t->requestRead;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4a14      	ldr	r2, [pc, #80]	; (8007028 <ModbusRtu_Slave_Init+0x70>)
 8006fd6:	60d3      	str	r3, [r2, #12]
	_rtuRxBuffer.index = 0;
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <ModbusRtu_Slave_Init+0x74>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	_rtuRxSmpHandle = xSemaphoreCreateBinary();
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	f7fd fa41 	bl	800446c <xQueueGenericCreate>
 8006fea:	4603      	mov	r3, r0
 8006fec:	4a10      	ldr	r2, [pc, #64]	; (8007030 <ModbusRtu_Slave_Init+0x78>)
 8006fee:	6013      	str	r3, [r2, #0]
	BaseType_t xReturned = xTaskCreate(  ModbusRtu_Slave_ReceiveTask,
 8006ff0:	4b10      	ldr	r3, [pc, #64]	; (8007034 <ModbusRtu_Slave_Init+0x7c>)
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffe:	490e      	ldr	r1, [pc, #56]	; (8007038 <ModbusRtu_Slave_Init+0x80>)
 8007000:	480e      	ldr	r0, [pc, #56]	; (800703c <ModbusRtu_Slave_Init+0x84>)
 8007002:	f7fd fd02 	bl	8004a0a <xTaskCreate>
 8007006:	60f8      	str	r0, [r7, #12]
										 NULL,
										 RTU_SLAVE_RX_TASK_PRIORITY,
										 &_modbusRtuTaskHandle
									);

	_config.requestRead(&_rxByte,1);
 8007008:	4b07      	ldr	r3, [pc, #28]	; (8007028 <ModbusRtu_Slave_Init+0x70>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2101      	movs	r1, #1
 800700e:	480c      	ldr	r0, [pc, #48]	; (8007040 <ModbusRtu_Slave_Init+0x88>)
 8007010:	4798      	blx	r3


	if( xReturned != pdPASS )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d002      	beq.n	800701e <ModbusRtu_Slave_Init+0x66>
		return -1;
 8007018:	f04f 33ff 	mov.w	r3, #4294967295
 800701c:	e000      	b.n	8007020 <ModbusRtu_Slave_Init+0x68>
	else
		return 1;
 800701e:	2301      	movs	r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200016b8 	.word	0x200016b8
 800702c:	200016dc 	.word	0x200016dc
 8007030:	200016d4 	.word	0x200016d4
 8007034:	200016d0 	.word	0x200016d0
 8007038:	08007404 	.word	0x08007404
 800703c:	08007045 	.word	0x08007045
 8007040:	200016d8 	.word	0x200016d8

08007044 <ModbusRtu_Slave_ReceiveTask>:

const ModbusBuffer* ModbusRtu_Slave_GetBuffer(void){
	return &(_rtuRxBuffer);
}

void ModbusRtu_Slave_ReceiveTask(void *argument){
 8007044:	b580      	push	{r7, lr}
 8007046:	b0c6      	sub	sp, #280	; 0x118
 8007048:	af00      	add	r7, sp, #0
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	6018      	str	r0, [r3, #0]
	ModbusRtuMessage_t receivedMsgStr;
	ModbusRtuMessage_t responseMsgStr;
	while( true ){
		if( xSemaphoreTake( _rtuRxSmpHandle, (TickType_t) 255 ) == pdTRUE ){
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <ModbusRtu_Slave_ReceiveTask+0xa4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	21ff      	movs	r1, #255	; 0xff
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd faef 	bl	8004638 <xQueueSemaphoreTake>
 800705a:	4603      	mov	r3, r0
 800705c:	2b01      	cmp	r3, #1
 800705e:	d1f6      	bne.n	800704e <ModbusRtu_Slave_ReceiveTask+0xa>
			// Modbus ID check
			if( _rtuRxBuffer.index > 6 && _rtuRxBuffer.buffer[0] == _config.id ){
 8007060:	4b22      	ldr	r3, [pc, #136]	; (80070ec <ModbusRtu_Slave_ReceiveTask+0xa8>)
 8007062:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007066:	2b06      	cmp	r3, #6
 8007068:	d9f1      	bls.n	800704e <ModbusRtu_Slave_ReceiveTask+0xa>
 800706a:	4b20      	ldr	r3, [pc, #128]	; (80070ec <ModbusRtu_Slave_ReceiveTask+0xa8>)
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <ModbusRtu_Slave_ReceiveTask+0xac>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d1eb      	bne.n	800704e <ModbusRtu_Slave_ReceiveTask+0xa>
				// Modbus RTU Message Generation
				ModbusCore_ClearPdu(&(receivedMsgStr.pdu));
 8007076:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800707a:	3302      	adds	r3, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff fed6 	bl	8006e2e <ModbusCore_ClearPdu>
				ModbusCore_ClearPdu(&(responseMsgStr.pdu));
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	3302      	adds	r3, #2
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fed0 	bl	8006e2e <ModbusCore_ClearPdu>
				ModbusRtu_ConstructStruct( &_rtuRxBuffer, &receivedMsgStr );
 800708e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007092:	4619      	mov	r1, r3
 8007094:	4815      	ldr	r0, [pc, #84]	; (80070ec <ModbusRtu_Slave_ReceiveTask+0xa8>)
 8007096:	f7ff ff02 	bl	8006e9e <ModbusRtu_ConstructStruct>
				if( ModbusRtu_CheckCRC( &receivedMsgStr )){
 800709a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fed7 	bl	8006e52 <ModbusRtu_CheckCRC>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0d1      	beq.n	800704e <ModbusRtu_Slave_ReceiveTask+0xa>
					ModbusCore_Process( &(receivedMsgStr.pdu), &(responseMsgStr.pdu ) );
 80070aa:	f107 0308 	add.w	r3, r7, #8
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80070b4:	3302      	adds	r3, #2
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fa99 	bl	80065f0 <ModbusCore_Process>
					responseMsgStr.id = _config.id;
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <ModbusRtu_Slave_ReceiveTask+0xac>)
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	701a      	strb	r2, [r3, #0]
					ModbusRtu_CreateCRC( &responseMsgStr );
 80070c8:	f107 0308 	add.w	r3, r7, #8
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fed6 	bl	8006e7e <ModbusRtu_CreateCRC>
					// reset input buffer..
					_rtuRxBuffer.index = 0;
 80070d2:	4b06      	ldr	r3, [pc, #24]	; (80070ec <ModbusRtu_Slave_ReceiveTask+0xa8>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					// transmit message
					ModbusRtu_Slave_Transmit( &responseMsgStr );
 80070da:	f107 0308 	add.w	r3, r7, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f876 	bl	80071d0 <ModbusRtu_Slave_Transmit>
		if( xSemaphoreTake( _rtuRxSmpHandle, (TickType_t) 255 ) == pdTRUE ){
 80070e4:	e7b3      	b.n	800704e <ModbusRtu_Slave_ReceiveTask+0xa>
 80070e6:	bf00      	nop
 80070e8:	200016d4 	.word	0x200016d4
 80070ec:	200016dc 	.word	0x200016dc
 80070f0:	200016b8 	.word	0x200016b8

080070f4 <ModbusRtu_Slave_onReceive>:
			}
		}
	}
}

void ModbusRtu_Slave_onReceive(void){
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
	ModbusRtu_Slave_Receive(_rxByte);
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <ModbusRtu_Slave_onReceive+0x14>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f805 	bl	800710c <ModbusRtu_Slave_Receive>
}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200016d8 	.word	0x200016d8

0800710c <ModbusRtu_Slave_Receive>:

void ModbusRtu_Slave_Receive( uint8_t rxByte ){
 800710c:	b5b0      	push	{r4, r5, r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	71fb      	strb	r3, [r7, #7]
	static BaseType_t xHigherPriorityTaskWoken;
	if( uwTick> ( _lastPackageTick + 500 ) )
 8007116:	4b26      	ldr	r3, [pc, #152]	; (80071b0 <ModbusRtu_Slave_Receive+0xa4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f04f 0100 	mov.w	r1, #0
 8007120:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <ModbusRtu_Slave_Receive+0xa8>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 800712a:	f143 0500 	adc.w	r5, r3, #0
 800712e:	428d      	cmp	r5, r1
 8007130:	bf08      	it	eq
 8007132:	4284      	cmpeq	r4, r0
 8007134:	d203      	bcs.n	800713e <ModbusRtu_Slave_Receive+0x32>
	{
		/* The time gap between last received package is higher than 500ms.
		 * Lets restart buffer index.
		 * */
		_rtuRxBuffer.index = 0;
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 8007138:	2200      	movs	r2, #0
 800713a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}
	_rtuRxBuffer.buffer[_rtuRxBuffer.index++] = rxByte;
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 8007140:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	b291      	uxth	r1, r2
 8007148:	4a1b      	ldr	r2, [pc, #108]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 800714a:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 800714e:	4619      	mov	r1, r3
 8007150:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	5453      	strb	r3, [r2, r1]
	xHigherPriorityTaskWoken = pdFALSE;
 8007156:	4b19      	ldr	r3, [pc, #100]	; (80071bc <ModbusRtu_Slave_Receive+0xb0>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
	if( _rtuRxBuffer.index == 8 ){
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 800715e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007162:	2b08      	cmp	r3, #8
 8007164:	d105      	bne.n	8007172 <ModbusRtu_Slave_Receive+0x66>
		expectedFrameSize = ModbusRtu_Slave_CalculateRxBufferSize( &_rtuRxBuffer );
 8007166:	4814      	ldr	r0, [pc, #80]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 8007168:	f000 f8a0 	bl	80072ac <ModbusRtu_Slave_CalculateRxBufferSize>
 800716c:	4603      	mov	r3, r0
 800716e:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <ModbusRtu_Slave_Receive+0xb4>)
 8007170:	6013      	str	r3, [r2, #0]
	}

	if ( _rtuRxBuffer.index == expectedFrameSize ){
 8007172:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <ModbusRtu_Slave_Receive+0xac>)
 8007174:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007178:	461a      	mov	r2, r3
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <ModbusRtu_Slave_Receive+0xb4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d105      	bne.n	800718e <ModbusRtu_Slave_Receive+0x82>
		xSemaphoreGiveFromISR( _rtuRxSmpHandle, &xHigherPriorityTaskWoken );
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <ModbusRtu_Slave_Receive+0xb8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	490d      	ldr	r1, [pc, #52]	; (80071bc <ModbusRtu_Slave_Receive+0xb0>)
 8007188:	4618      	mov	r0, r3
 800718a:	f7fd f9c8 	bl	800451e <xQueueGiveFromISR>
	}

	_lastPackageTick = uwTick;
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <ModbusRtu_Slave_Receive+0xa4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <ModbusRtu_Slave_Receive+0xa8>)
 800719a:	e9c1 2300 	strd	r2, r3, [r1]
	_config.requestRead(&_rxByte,1);
 800719e:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <ModbusRtu_Slave_Receive+0xbc>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2101      	movs	r1, #1
 80071a4:	4809      	ldr	r0, [pc, #36]	; (80071cc <ModbusRtu_Slave_Receive+0xc0>)
 80071a6:	4798      	blx	r3
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bdb0      	pop	{r4, r5, r7, pc}
 80071b0:	200012b4 	.word	0x200012b4
 80071b4:	200016c8 	.word	0x200016c8
 80071b8:	200016dc 	.word	0x200016dc
 80071bc:	200011cc 	.word	0x200011cc
 80071c0:	200011c8 	.word	0x200011c8
 80071c4:	200016d4 	.word	0x200016d4
 80071c8:	200016b8 	.word	0x200016b8
 80071cc:	200016d8 	.word	0x200016d8

080071d0 <ModbusRtu_Slave_Transmit>:

void ModbusRtu_Slave_Transmit( const ModbusRtuMessage_t* outputMsgStr ){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b0a4      	sub	sp, #144	; 0x90
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	if( _config.send != NULL && outputMsgStr != NULL ){
 80071d8:	4b33      	ldr	r3, [pc, #204]	; (80072a8 <ModbusRtu_Slave_Transmit+0xd8>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d05e      	beq.n	800729e <ModbusRtu_Slave_Transmit+0xce>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d05b      	beq.n	800729e <ModbusRtu_Slave_Transmit+0xce>
		ModbusBuffer _tempBuffer;
		_tempBuffer.index = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		_tempBuffer.buffer[_tempBuffer.index++] = outputMsgStr->id;
 80071ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	b292      	uxth	r2, r2
 80071f4:	f8a7 2088 	strh.w	r2, [r7, #136]	; 0x88
 80071f8:	4619      	mov	r1, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007202:	440b      	add	r3, r1
 8007204:	f803 2c88 	strb.w	r2, [r3, #-136]
		for( int k = 0; k < outputMsgStr->pdu.index; k++ ){
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800720e:	e016      	b.n	800723e <ModbusRtu_Slave_Transmit+0x6e>
			_tempBuffer.buffer[_tempBuffer.index++] = outputMsgStr->pdu.buffer[k];
 8007210:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	b292      	uxth	r2, r2
 8007218:	f8a7 2088 	strh.w	r2, [r7, #136]	; 0x88
 800721c:	4619      	mov	r1, r3
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007224:	4413      	add	r3, r2
 8007226:	3302      	adds	r3, #2
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800722e:	440b      	add	r3, r1
 8007230:	f803 2c88 	strb.w	r2, [r3, #-136]
		for( int k = 0; k < outputMsgStr->pdu.index; k++ ){
 8007234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007238:	3301      	adds	r3, #1
 800723a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800724a:	4293      	cmp	r3, r2
 800724c:	dbe0      	blt.n	8007210 <ModbusRtu_Slave_Transmit+0x40>
		}
		_tempBuffer.buffer[_tempBuffer.index++] = outputMsgStr->crc >> 8;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800725c:	1c59      	adds	r1, r3, #1
 800725e:	b289      	uxth	r1, r1
 8007260:	f8a7 1088 	strh.w	r1, [r7, #136]	; 0x88
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800726a:	440b      	add	r3, r1
 800726c:	f803 2c88 	strb.w	r2, [r3, #-136]
		_tempBuffer.buffer[_tempBuffer.index++] = outputMsgStr->crc & 0xFF;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8007276:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	b289      	uxth	r1, r1
 800727e:	f8a7 1088 	strh.w	r1, [r7, #136]	; 0x88
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007288:	440b      	add	r3, r1
 800728a:	f803 2c88 	strb.w	r2, [r3, #-136]
		_config.send(_tempBuffer.buffer, _tempBuffer.index );
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <ModbusRtu_Slave_Transmit+0xd8>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8007296:	f107 0208 	add.w	r2, r7, #8
 800729a:	4610      	mov	r0, r2
 800729c:	4798      	blx	r3
		//HAL_UART_Transmit(&huart3, _tempBuffer.buffer, _tempBuffer.index, 1000 );
	}
}
 800729e:	bf00      	nop
 80072a0:	3790      	adds	r7, #144	; 0x90
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200016b8 	.word	0x200016b8

080072ac <ModbusRtu_Slave_CalculateRxBufferSize>:

int ModbusRtu_Slave_CalculateRxBufferSize( const ModbusBuffer *buffer ){
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	int expectedFrameSize = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
	if( buffer->index < 8 ) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d802      	bhi.n	80072c8 <ModbusRtu_Slave_CalculateRxBufferSize+0x1c>
		return -1;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	e038      	b.n	800733a <ModbusRtu_Slave_CalculateRxBufferSize+0x8e>
	}
	switch( buffer->buffer[1] ){
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	d82f      	bhi.n	8007332 <ModbusRtu_Slave_CalculateRxBufferSize+0x86>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <ModbusRtu_Slave_CalculateRxBufferSize+0x2c>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	08007319 	.word	0x08007319
 80072dc:	08007319 	.word	0x08007319
 80072e0:	08007319 	.word	0x08007319
 80072e4:	08007319 	.word	0x08007319
 80072e8:	08007333 	.word	0x08007333
 80072ec:	08007319 	.word	0x08007319
 80072f0:	08007333 	.word	0x08007333
 80072f4:	08007333 	.word	0x08007333
 80072f8:	08007333 	.word	0x08007333
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007333 	.word	0x08007333
 8007304:	08007333 	.word	0x08007333
 8007308:	08007333 	.word	0x08007333
 800730c:	08007333 	.word	0x08007333
 8007310:	0800731f 	.word	0x0800731f
 8007314:	08007327 	.word	0x08007327
		case READ_COIL_STATUS:
		case READ_INPUT_STATUS:
		case READ_HOLDING_REGISTERS:
		case READ_INPUT_REGISTERS:
		case PRESET_SINGLE_REGISTER:
			expectedFrameSize = 8;
 8007318:	2308      	movs	r3, #8
 800731a:	60fb      	str	r3, [r7, #12]
			break;
 800731c:	e00c      	b.n	8007338 <ModbusRtu_Slave_CalculateRxBufferSize+0x8c>
		case FORCE_MULTIPLE_COILS:
			expectedFrameSize = buffer->buffer[6] + 9;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	799b      	ldrb	r3, [r3, #6]
 8007322:	3309      	adds	r3, #9
 8007324:	60fb      	str	r3, [r7, #12]
		case PRESET_MULTIPLE_REGISTERS:
			expectedFrameSize = buffer->buffer[5] * 2 + 9;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	795b      	ldrb	r3, [r3, #5]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	3309      	adds	r3, #9
 800732e:	60fb      	str	r3, [r7, #12]
			break;
 8007330:	e002      	b.n	8007338 <ModbusRtu_Slave_CalculateRxBufferSize+0x8c>
		default:
			expectedFrameSize = 8;
 8007332:	2308      	movs	r3, #8
 8007334:	60fb      	str	r3, [r7, #12]
			break;
 8007336:	bf00      	nop
	}
	return expectedFrameSize;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4d0d      	ldr	r5, [pc, #52]	; (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2600      	movs	r6, #0
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4d0b      	ldr	r5, [pc, #44]	; (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	; (800738c <__libc_init_array+0x44>)
 800735c:	f000 f82e 	bl	80073bc <_init>
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2600      	movs	r6, #0
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08007460 	.word	0x08007460
 8007384:	08007460 	.word	0x08007460
 8007388:	08007460 	.word	0x08007460
 800738c:	08007464 	.word	0x08007464

08007390 <memcpy>:
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	f100 33ff 	add.w	r3, r0, #4294967295
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	4770      	bx	lr
 800739c:	b510      	push	{r4, lr}
 800739e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a6:	4291      	cmp	r1, r2
 80073a8:	d1f9      	bne.n	800739e <memcpy+0xe>
 80073aa:	bd10      	pop	{r4, pc}

080073ac <memset>:
 80073ac:	4402      	add	r2, r0
 80073ae:	4603      	mov	r3, r0
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d100      	bne.n	80073b6 <memset+0xa>
 80073b4:	4770      	bx	lr
 80073b6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ba:	e7f9      	b.n	80073b0 <memset+0x4>

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	bf00      	nop
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
